{
    "version": "https://jsonfeed.org/version/1",
    "title": "M4r10&apos;s Blog",
    "home_page_url": "https://th3m4r10.github.io/",
    "feed_url": "https://th3m4r10.github.io/feed.json",
    "description": "just a minimalist, personal blog",
    "icon": "https://th3m4r10.github.io/apple-touch-icon.png",
    "favicon": "https://th3m4r10.github.io/favicon.ico",
    "expired": false,
    
    "author":  {
        "name": "M4r10",
        "url": null,
        "avatar": null
    },
    
"items": [
    
        {
            "id": "https://th3m4r10.github.io/2023/04/24/dawgctf",
            "title": "DawgCTF 2023",
            "summary": null,
            "content_text": "Hi Mates!I played this CTF as usually along with my team Invaders0x1. During the competition, my team and I worked tirelessly without taking a break from Fri, 21 April 2023, 22:30 IST ‚Äî Sun, 23 April 2023, 22:30 IST.Proud to share our team ranked #Top6 globally in DawgCTF2023 which was hosted by UMBCCyberDawgs.We faced tough competition from some of the best teams in the world, but we were determined to succeed.Despite the difficulty of the task, our team persevered and came up with a creative solution.Overall, we are grateful for the experience and proud of our achievement. We will continue to work hard and strive for excellence in future competitions.Our team knows that #persistence is key to success, and we will continue to demonstrate that in everything we do.Here are some of the challenges I have solved :Breaker, BreakerI got this radio recording of a local police department using my trusty scanner, can you figure out what all those fancy numbers mean? View Files Here  üëà(The flag will be in alphabetical format only and you will enclose it in DawgCTF, i.e DawgCTF{FLAGGERT}After downloading the 40-second audio file, I have been listening to this audio for nearly 1 hour in an attempt to understand and identify the number digits in the audio.However, I have not been successful in identifying the exact number digits. As a result, I decided to use online tools like Flixier to generate a transcript (i.e., convert audio to text), but it gave worse results than what I was able to do myself ü•≤.‚óèAgain I was decided to do myself. And the result is Step-1: [10-1-8, 10-7, 10-0, 10-17, 10-15, 10-4, 10-0, 10-1-7, 10-18 And 65 ]Step-2: [10-18, 10-7, 10-0, 10-17, 10-15, 10-4, 10-0, 10-17, 10-18 And 65]Step-3: [18, 7, 0, 17, 15, 4, 0, 17, 18 And 65]Step-4: [18, 7, 0, 17, 15, 4, 0, 17, 18, A]Here 65 is the hint, i.e., 65 = A in ASCIIAfter spending whole day with different ways to decode the sequence,Finally figured something good.i.e., Add 65 to all numbersStep-5: [18+65 7+65 0+65 17+65 15+65 4+65 0+65 17+65 18+65]Step-6: [ 83 72 65 82 80 69 65 82 83 ]To convert Decimal to Ascii :decimal_values = [83, 72, 65, 82, 80, 69, 65, 82, 83]ascii_string = ''.join([chr(decimal) for decimal in decimal_values])print(ascii_string)Output : S H A R P E A R S  Flag : DawgCTF{SHARPEARS}Oh, DeerMy friend sent me a bunch of pictures of deer and said there's a secret code in them or something. Can you figure out what he's talking about? He mentioned something about going from left to right in order and that there's only two types of a thing in all the pictures. He also said that it's not zeroes and ones, but wouldn't tell me what other two things it would be if not zero and one.The flag will be in the format DawgCTF{THEFLAG}, alphabetical only, all capitals for the contents inside DawgCTF{}. View Files Here  üëàAfter extracting the ohdeer.zip file, we obtained 0-24 deer images, with each image containing 2 deers.By observing the images, we can differentiate between the sexes of the deer.From left to right:(F)  (M)(M)  (F)(M)  (M)(F)  (F)We have obtained the final sequence form all images :FM MF MF MM MF MF FF MF FM FF FM FF FF MM FM FF FM MF FM FF FF MF FM FF FMThis is the Baconian Cipher,FMMFM FMMMF MFFFM FFMFF FMFFF FMMFM FFFMM FFMFF FFMFF MFFFMUsing dCode we can decrypt Cipher text and obtain Plain textN O R E I N D E E RAnd here is the flag,  Flag : DawgCTF{NOREINDEER}Yo DawgYo Dawg, we heard you like flags, so we put a flag in your memes.View Files HereUsing command : exiftool yo_dawg.jpgm4r10@ARLinux:~/Desktop/CyberSec/CTF/DawgCTF/forensic$ exiftool yo_dawg.jpg ExifTool Version Number         : 12.40File Name                       : yo_dawg.jpgDirectory                       : .File Size                       : 41 KiBFile Modification Date/Time     : 2023:04:22 10:49:38+05:30File Access Date/Time           : 2023:04:22 10:52:46+05:30File Inode Change Date/Time     : 2023:04:22 10:50:01+05:30File Permissions                : -rw-rw-r--File Type                       : JPEGFile Type Extension             : jpgMIME Type                       : image/jpegJFIF Version                    : 1.01Resolution Unit                 : NoneX Resolution                    : 72Y Resolution                    : 72Image Width                     : 622Image Height                    : 401Encoding Process                : Baseline DCT, Huffman codingBits Per Sample                 : 8Color Components                : 3Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)Image Size                      : 622x401Megapixels                      : 0.249Bu using stegsolverWe can,Analyze color channels to identify hidden data,Extract and analyzing metadata embedded in the image file,Apply various filters to the image to highlight hidden information,Check for unusual patterns or anomalies in the image.Finally, After changing the Frame obtained the flag.And the flag is,  Flag : DawgCTF{h342d_y0u_11k3_f1495_d4w9}",
            "content_html": "<p>Hi Mates!</p><p>I played this CTF as usually along with my team <a href=\"https://ctftime.org/team/217079\">Invaders0x1</a>. During the competition, my team and I worked tirelessly without taking a break from Fri, 21 April 2023, 22:30 IST ‚Äî Sun, 23 April 2023, 22:30 IST.<br />Proud to share our team ranked <a style=\"color: cyan;\" href=\"https://ctftime.org/event/1974\" target=\"_blank\">#Top6</a> globally in <a>DawgCTF2023</a> which was hosted by <a style=\"color: cyan;\" href=\"https://umbccd.umbc.edu/\">UMBCCyberDawgs</a>.We faced tough competition from some of the best teams in the world, but we were determined to succeed.Despite the difficulty of the task, our team persevered and came up with a creative solution.</p><p><img src=\"/assets/img/post_img/dawgctf_scoreboard.jpg\" alt=\"scoreboard\" height=\"700\" /></p><p>Overall, we are grateful for the experience and proud of our achievement. We will continue to work hard and strive for excellence in future competitions.<br />Our team knows that <a>#persistence</a> is key to success, and we will continue to demonstrate that in everything we do.</p><p>Here are some of the challenges I have solved :</p><h3 id=\"breaker-breaker\">Breaker, Breaker</h3><p><img src=\"/assets/img/post_img/breaker_breaker.png\" alt=\"Breaker, Breaker \" /></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>I got this radio recording of a local police department using my trusty scanner, can you figure out what all those fancy numbers mean?</code></pre></div></div><p><a href=\"https://drive.google.com/file/d/118-1GWC7F0he5EVhF6jnGUmu7CbBaSnD/view\" target=\"_blank\"> View Files Here</a>  üëà</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>(The flag will be in alphabetical format only and you will enclose it in DawgCTF, i.e DawgCTF{FLAGGERT}</code></pre></div></div><p>After downloading the <strong>40-second</strong> audio file, I have been listening to this audio for nearly <strong>1 hour</strong> in an attempt to understand and identify the number digits in the audio.<br />However, I have not been successful in identifying the exact number digits. As a result, I decided to use online tools like <strong>Flixier</strong> to generate a transcript (i.e., convert audio to text), but it gave worse results than what I was able to do myself ü•≤.‚óè</p><p>Again I was decided to do myself. And the result is <br /></p><p><strong>Step-1: [10-1-8, 10-7, 10-0, 10-17, 10-15, 10-4, 10-0, 10-1-7, 10-18 And 65 ]</strong></p><p><strong>Step-2: [10-18, 10-7, 10-0, 10-17, 10-15, 10-4, 10-0, 10-17, 10-18 And 65]</strong></p><p><strong>Step-3: [18, 7, 0, 17, 15, 4, 0, 17, 18 And 65]</strong></p><p><strong>Step-4: [18, 7, 0, 17, 15, 4, 0, 17, 18, A]</strong></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Here 65 is the hint, i.e., 65 = A in ASCII</code></pre></div></div><p>After spending whole day with different ways to decode the sequence,</p><p>Finally figured something good.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>i.e., Add 65 to all numbers</code></pre></div></div><p><strong>Step-5: [18+65 7+65 0+65 17+65 15+65 4+65 0+65 17+65 18+65]</strong></p><p><strong>Step-6: [ 83 72 65 82 80 69 65 82 83 ]</strong></p><p>To convert Decimal to Ascii :</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>decimal_values = [83, 72, 65, 82, 80, 69, 65, 82, 83]ascii_string = ''.join([chr(decimal) for decimal in decimal_values])print(ascii_string)</code></pre></div></div><p>Output : S H A R P E A R S</p><blockquote>  <p><em><strong><code class=\"language-plaintext highlighter-rouge\">Flag : DawgCTF{SHARPEARS}</code></strong></em></p></blockquote><hr /><h3 id=\"oh-deer\">Oh, Deer</h3><p><img src=\"/assets/img/post_img/oh_deer.png\" alt=\"Oh, Deer \" /></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>My friend sent me a bunch of pictures of deer and said there's a secret code in them or something. Can you figure out what he's talking about? He mentioned something about going from left to right in order and that there's only two types of a thing in all the pictures. He also said that it's not zeroes and ones, but wouldn't tell me what other two things it would be if not zero and one.The flag will be in the format DawgCTF{THEFLAG}, alphabetical only, all capitals for the contents inside DawgCTF{}.</code></pre></div></div><p><a href=\"https://drive.google.com/file/d/1e2Sou85uToT-31kg3HWaVV11yVmcVD6N/view\" target=\"_blank\"> View Files Here</a>  üëàAfter extracting the ohdeer.zip file, we obtained 0-24 deer images, with each image containing 2 deers.<br />By observing the images, we can differentiate between the sexes of the deer.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>From left to right:(F)  (M)(M)  (F)(M)  (M)(F)  (F)</code></pre></div></div><p>We have obtained the final sequence form all images :</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>FM MF MF MM MF MF FF MF FM FF FM FF FF MM FM FF FM MF FM FF FF MF FM FF FM</code></pre></div></div><p>This is the <strong><code class=\"language-plaintext highlighter-rouge\">Baconian Cipher</code></strong>,</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>FMMFM FMMMF MFFFM FFMFF FMFFF FMMFM FFFMM FFMFF FFMFF MFFFM</code></pre></div></div><p>Using <a href=\"https://www.dcode.fr/bacon-cipher\">dCode</a> we can decrypt <strong>Cipher text</strong> and obtain <strong>Plain text</strong></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>N O R E I N D E E R</code></pre></div></div><p>And here is the flag,</p><blockquote>  <p><strong><code class=\"language-plaintext highlighter-rouge\">Flag : DawgCTF{NOREINDEER}</code></strong></p></blockquote><hr /><h3 id=\"yo-dawg\">Yo Dawg</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Yo Dawg, we heard you like flags, so we put a flag in your memes.</code></pre></div></div><p><a href=\"https://drive.google.com/file/d/1PlajwJ5IzRsFhk9BV0EaMRrT6yAwA-FG/view\" target=\"_blank\">View Files Here</a></p><p>Using command : <code class=\"language-plaintext highlighter-rouge\">exiftool yo_dawg.jpg</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>m4r10@ARLinux:~/Desktop/CyberSec/CTF/DawgCTF/forensic$ exiftool yo_dawg.jpg ExifTool Version Number         : 12.40File Name                       : yo_dawg.jpgDirectory                       : .File Size                       : 41 KiBFile Modification Date/Time     : 2023:04:22 10:49:38+05:30File Access Date/Time           : 2023:04:22 10:52:46+05:30File Inode Change Date/Time     : 2023:04:22 10:50:01+05:30File Permissions                : -rw-rw-r--File Type                       : JPEGFile Type Extension             : jpgMIME Type                       : image/jpegJFIF Version                    : 1.01Resolution Unit                 : NoneX Resolution                    : 72Y Resolution                    : 72Image Width                     : 622Image Height                    : 401Encoding Process                : Baseline DCT, Huffman codingBits Per Sample                 : 8Color Components                : 3Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)Image Size                      : 622x401Megapixels                      : 0.249</code></pre></div></div><p>Bu using <strong><code class=\"language-plaintext highlighter-rouge\">stegsolver</code></strong><br />We can,<br />Analyze color channels to identify hidden data,<br />Extract and analyzing metadata embedded in the image file,<br />Apply various filters to the image to highlight hidden information,<br />Check for unusual patterns or anomalies in the image.</p><p>Finally, After changing the <strong>Frame</strong> obtained the flag.</p><p><img src=\"/assets/img/post_img/yo_dawg.png\" alt=\"yo_dawg\" /></p><p>And the flag is,</p><blockquote>  <p><strong><code class=\"language-plaintext highlighter-rouge\">Flag : DawgCTF{h342d_y0u_11k3_f1495_d4w9}</code></strong></p></blockquote>",
            "url": "https://th3m4r10.github.io/2023/04/24/dawgctf",
            
            
            
            
            
            "date_published": "2023-04-24T00:00:00+00:00",
            "date_modified": "2023-04-24T00:00:00+00:00",
            
                "author":  {
                "name": "M4r10",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://th3m4r10.github.io/2023/04/18/jerseyctf",
            "title": "JerseyCTF III",
            "summary": null,
            "content_text": "Hello mates!I played JerseyCTF III which was hosted by the NJIT ACM along with my team Invaders0x1.Our team achieved a commendable 125th place in the CTF competition, and we are determined to strive for even better results in future competitions.Here are some of the challenges I have solved :back-to-the-officeChallenge details :There's a flag somewhere in this Microsoft Word document.Hint :Newer Microsoft Office files are in OOXML format. Learn more about this file format to find the flag.Here is the attached file back-to-the-office.docx.Download the given file and extract with the command unzip back-to-the-office.docxAnd to check directories use tree *m4r10@ARLinux:~/Desktop/CyberSec/CTF/jerseyCTF/misc$ tree *back-to-the-office.docx  [error opening dir][Content_Types].xml  [error opening dir]docProps‚îú‚îÄ‚îÄ app.xml‚îî‚îÄ‚îÄ core.xml_relsword‚îú‚îÄ‚îÄ document.xml‚îú‚îÄ‚îÄ fontTable.xml‚îú‚îÄ‚îÄ _rels‚îÇ¬†¬† ‚îî‚îÄ‚îÄ document.xml.rels‚îú‚îÄ‚îÄ settings.xml‚îú‚îÄ‚îÄ styles.xml‚îú‚îÄ‚îÄ theme‚îÇ¬†¬† ‚îî‚îÄ‚îÄ theme1.xml‚îî‚îÄ‚îÄ webSettings.xmlAfter that run the command cat word/settings.xmlYayy, you got the flag at the end of the xml code.  Flag : jctf{601n6_1n70_7h3_0ff1c3}put-the-cookie-downChallenge details :The Terminator has sent you a frantic message from 1996, maybe it's something important! Wait... do I smell cookies?Flag format: jctf{string}Here are the steps I followed:-Open your browser DevTools-As the hint suggests, we will be exploring DevTools a bit deeper-Navigate to the Application tab-On the left side of the Application tab, go to Storage &gt; Cookies-Click on the website‚Äôs URL to see the cookie data.Or otherwise you can simply open cookies to check the flag,  Flag: jctf{I_WILL_BE_BACK_FOR_MORE_C00KI3S!}back-to-socialsChallenge details :The NICC club that co-hosts this event jumped into the NCAE Cyber Games this past February and placed well for the first time competing as a club! The club wanted to let everyone at the school know of their successes and were very social! Can you dig deep and find out where this flag could be planted?Hint :There is usually some sort of website that people can share their achievements to a professional crowd...From this hint,I have decided to search for the NICC Competes in their first NCAE Cyber Games post on LinkedIn.And here is the result with post link,https://www.linkedin.com/pulse/nicc-competes-first-ncae-cyber-games-njiticc/  Flag : jctf{c0mp3titi0n_spark5_excellency}",
            "content_html": "<p>Hello mates!</p><p>I played <a href=\"https://ctf.jerseyctf.com/\" target=\"_blank\">JerseyCTF III</a> which was hosted by the <a style=\"color:cyan;\">NJIT ACM</a> along with my team <a>Invaders0x1</a>.Our team achieved a commendable 125th place in the CTF competition, and we are determined to strive for even better results in future competitions.</p><p>Here are some of the challenges I have solved :</p><h3 id=\"back-to-the-office\">back-to-the-office</h3><p>Challenge details :</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>There's a flag somewhere in this Microsoft Word document.</code></pre></div></div><p>Hint :</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>Newer Microsoft Office files are in OOXML format. Learn more about this file format to find the flag.</code></pre></div></div><p>Here is the attached file <a href=\"/assets/files/jerseyCTF/back-to-the-office.docx\" download=\"\">back-to-the-office.docx</a>.</p><p>Download the given file and extract with the command <code class=\"language-plaintext highlighter-rouge\">unzip back-to-the-office.docx</code></p><p>And to check directories use <code class=\"language-plaintext highlighter-rouge\">tree *</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>m4r10@ARLinux:~/Desktop/CyberSec/CTF/jerseyCTF/misc$ tree *back-to-the-office.docx  [error opening dir][Content_Types].xml  [error opening dir]docProps‚îú‚îÄ‚îÄ app.xml‚îî‚îÄ‚îÄ core.xml_relsword‚îú‚îÄ‚îÄ document.xml‚îú‚îÄ‚îÄ fontTable.xml‚îú‚îÄ‚îÄ _rels‚îÇ¬†¬† ‚îî‚îÄ‚îÄ document.xml.rels‚îú‚îÄ‚îÄ settings.xml‚îú‚îÄ‚îÄ styles.xml‚îú‚îÄ‚îÄ theme‚îÇ¬†¬† ‚îî‚îÄ‚îÄ theme1.xml‚îî‚îÄ‚îÄ webSettings.xml</code></pre></div></div><p>After that run the command <code class=\"language-plaintext highlighter-rouge\">cat word/settings.xml</code></p><p>Yayy, you got the flag at the end of the xml code.</p><blockquote>  <p><em><code class=\"language-plaintext highlighter-rouge\">Flag : jctf{601n6_1n70_7h3_0ff1c3}</code></em></p></blockquote><h3 id=\"put-the-cookie-down\">put-the-cookie-down</h3><p>Challenge details :</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The Terminator has sent you a frantic message from 1996, maybe it's something important! Wait... do I smell cookies?Flag format: jctf{string}</code></pre></div></div><p>Here are the steps I followed:</p><p>-Open your browser DevTools<br />-As the hint suggests, we will be exploring DevTools a bit deeper<br />-Navigate to the Application tab<br />-On the left side of the Application tab, go to <code class=\"language-plaintext highlighter-rouge\">Storage &gt; Cookies</code><br />-Click on the website‚Äôs URL to see the cookie data.</p><p>Or otherwise you can simply open cookies to check the flag,</p><p><img src=\"/assets/img/post_img/put-the-cookie-down.png\" alt=\"Payload\" /></p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag: jctf{I_WILL_BE_BACK_FOR_MORE_C00KI3S!}</code></p></blockquote><h3 id=\"back-to-socials\">back-to-socials</h3><p>Challenge details :</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>The NICC club that co-hosts this event jumped into the NCAE Cyber Games this past February and placed well for the first time competing as a club! The club wanted to let everyone at the school know of their successes and were very social! Can you dig deep and find out where this flag could be planted?</code></pre></div></div><p>Hint :</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>There is usually some sort of website that people can share their achievements to a professional crowd...</code></pre></div></div><p>From this hint,</p><p>I have decided to search for the <em><code class=\"language-plaintext highlighter-rouge\">NICC Competes in their first NCAE Cyber Games</code></em> post on LinkedIn.<br />And here is the result with post link,</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>https://www.linkedin.com/pulse/nicc-competes-first-ncae-cyber-games-njiticc/</code></pre></div></div><p><img src=\"/assets/img/post_img/back-to-socials.png\" alt=\"Payload\" /></p><blockquote>  <p><em><code class=\"language-plaintext highlighter-rouge\">Flag : jctf{c0mp3titi0n_spark5_excellency}</code></em></p></blockquote>",
            "url": "https://th3m4r10.github.io/2023/04/18/jerseyctf",
            
            
            
            
            
            "date_published": "2023-04-18T00:00:00+00:00",
            "date_modified": "2023-04-18T00:00:00+00:00",
            
                "author":  {
                "name": "M4r10",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://th3m4r10.github.io/2023/04/11/cursedctf",
            "title": "CursedCTF 2023",
            "summary": null,
            "content_text": "Hi Mates!",
            "content_html": "<p>Hi Mates!</p>",
            "url": "https://th3m4r10.github.io/2023/04/11/cursedctf",
            
            
            
            
            
            "date_published": "2023-04-11T00:00:00+00:00",
            "date_modified": "2023-04-11T00:00:00+00:00",
            
                "author":  {
                "name": "M4r10",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://th3m4r10.github.io/2023/04/04/picoctf2023",
            "title": "PicoCTF 2023",
            "summary": null,
            "content_text": "Hi Mates!I participated in the picoCTF 2023 organized by Carnegie Mellon University, Which was run from Mar 14 2023 to Mar 28 2023. PicoCTF is a free online cybersecurity competition aimed at middle and high school students, but it‚Äôs also suitable for beginners of all ages. It was a great learning experience and I really learnt a lot.Let me explain the challenges that I have solved in picoCTF 2023.General Skills :I solved all the challenges that were given !ChronoHere is the given challenge :Firstly, We have to launch the instance and connect to the server with given credentials.Based on the question prompt it had to be cron jobs.After various attempts to access crontab itself, I tried looking inside /etc/crontab with the cat command.  Flag : picoCTF{Sch3DUL7NG_T45K3_L1NUX_1b4d8744}Money-wareHere is the given challenge :I don‚Äôt know what it is but i‚Äôm googling 1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX, I got the link which had reports with descriptions and one of those descriptions points us to:More information is here :  https://blog.avira.com/petya-strikes-back/ This is an article about a vulnerability called Petya so our answer should be:  Flag : picoCTF{petya}PermissionsHere is the given challenge :We have to connect the server and cd / , I saw a directory named challenge, inside it there was a file which when cating it game the flag.  Flag : picoCTF{uS1ng_v1m_3dit0r_021d10ab}RepetitionsHere is the given challenge :The file itself looks like standard base64 encoding and decoding it will give you the flag use cyberchef.I had to decode with base64 six times to get the flag üòÇ  Flag : picoCTF{base64_n3st3d_dic0d!n8_d0wnl04d3d_dfe803c6}UselessHere is the given challenge :In the home directory there is a file named useless.After running the command man uselessWe got the flag,  Flag : picoCTF{us3l3ss_ch4ll3ng3_3xpl0it3d_3555}SpecialHere is the given challenge :This challenge was hard and to come with this bash script.My solution was as follows:cat flag.txt | cat /home/ctf-player/*/*.txt  Flag : picoCTF{5p311ch3ck_15_7h3_w0r57_a60bdf40}*** SpecialerHere is the given challenge :Connecting into the shell we‚Äôre not allowed a lot of things like cat, ls....After a lot of tries,My solution was as follows:echo \"$( &lt; /home/ctf-player/ala/kazam.txt)\"Now we got the flag :  Flag : picoCTF{5p311ch3ck_15_7h3_w0r57_a60bdf40}Cryptographhy :Although I couldn‚Äôt solve all the challenges, I managed to solve some of the challenges that I knew how to do!HideToSeeHere is the given challenge :Lets download the file.This is a jpeg file. We‚Äôll be using a tool called steghide to extract information from this jpeg file, Use : steghide -sf --extract atbash.jpgHere we got a text file called encrypted.txt, Use : cat encrypted.txtkrxlXGU{zgyzhs_xizxp_8z0uvwwx}It looks like flag but it‚Äôs not.Now just need to decode atbash and you‚Äôre doneWe got the flag,  Flag : picoCTF{atbash_crack_6c4bcb08}ReadMyCertHere is the given challenge :Lets download the file.From the hint we were try to read the file. Bang !!And the flag is,  Flag : picoCTF{read_mycert_41d1c74c}RotationHere is the given challenge :Lets download the file and open with cat encrypted.txtxqkwKBN{z0bib1wv_l3kzgxb3l_555957n3}We got another encrypted text having the flag format. I got to know that this is a caesar cipher, so I used to decrypt with this online toolIt is a simple Rotation cipher, brute-forcing works fine.Here is the flag,  Flag : picoCTF{r0tat1on_d3crypt3d_949af1a1}Forensics :HidemeHere is the given challenge :Lets download the file and check file type with exiftool‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ file flag.png        flag.png: PNG image data, 512 x 504, 8-bit/color RGBA, non-interlaced                                                                                                                                                                        ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ exiftool flag.png        ExifTool Version Number         : 12.57File Name                       : flag.pngDirectory                       : .File Size                       : 43 kBFile Modification Date/Time     : 2023:03:22 19:38:37+01:00File Access Date/Time           : 2023:03:22 19:38:53+01:00File Inode Change Date/Time     : 2023:03:22 19:38:48+01:00File Permissions                : -rw-r--r--File Type                       : PNGFile Type Extension             : pngMIME Type                       : image/pngImage Width                     : 512Image Height                    : 504Bit Depth                       : 8Color Type                      : RGB with AlphaCompression                     : Deflate/InflateFilter                          : AdaptiveInterlace                       : NoninterlacedWarning                         : [minor] Trailer data after PNG IEND chunkImage Size                      : 512x504Megapixels                      : 0.258This is a PNG, So we can observe the header using a tool called zsteg‚îå‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ‚îÄ‚ïº $zsteg flag.png [?] 3191 bytes of extra data after image end (IEND), offset = 0x9b3bextradata:0         .. file: Zip archive data, at least v1.0 to extract    00000000: 50 4b 03 04 0a 00 00 00  00 00 3a 10 70 56 00 00  |PK........:.pV..|    00000010: 00 00 00 00 00 00 00 00  00 00 07 00 1c 00 73 65  |..............se|    00000020: 63 72 65 74 2f 55 54 09  00 03 8f 78 12 64 8f 78  |cret/UT....x.d.x|    00000030: 12 64 75 78 0b 00 01 04  00 00 00 00 04 00 00 00  |.dux............|    00000040: 00 50 4b 03 04 14 00 00  00 08 00 3a 10 70 56 67  |.PK........:.pVg|    00000050: 45 23 b5 35 0b 00 00 d0  0b 00 00 0f 00 1c 00 73  |E#.5...........s|    00000060: 65 63 72 65 74 2f 66 6c  61 67 2e 70 6e 67 55 54  |ecret/flag.pngUT|    00000070: 09 00 03 8f 78 12 64 8f  78 12 64 75 78 0b 00 01  |....x.d.x.dux...|    00000080: 04 00 00 00 00 04 00 00  00 00 cd 56 59 3c 14 fc  |...........VY&lt;..|    00000090: 1a fe 87 b2 26 1f 22 5b  a3 65 1a 59 c6 30 76 33  |....&amp;.\"[.e.Y.0v3|    000000a0: c4 47 92 35 44 f6 35 bb  6c 43 1a 65 64 49 85 10  |.G.5D.5.lC.edI..|    000000b0: 45 d9 3e 6a ec 63 9d 21  64 df 69 08 23 fb 12 45  |E.&gt;j.c.!d.i.#..E|    000000c0: f6 65 2c 8d 8a 33 e7 77  ae ce c5 b9 3f ef c5 fb  |.e,..3.w....?...|    000000d0: bc db 73 f7 fe 9e df f3  cc d8 50 e7 34 9b 20 1b  |..s.......P.4. .|    000000e0: 00 e0 b4 ee 0d 2d 13 00  18 ee d0 6b 59 2e 7a 02  |.....-.....kY.z.|    000000f0: 7b 3e 57 cc e9 c0 e4 a6  61 a0 01 40 45 02 fb 6f  |{&gt;W.....a..@E..o|Interesting üòé. So, I went ahead to unzip command : unzip flag.png‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ unzip flag.png                          Archive:  flag.pngwarning [flag.png]:  39739 extra bytes at beginning or within zipfile  (attempting to process anyway)   creating: secret/  inflating: secret/flag.png                                                                                                                                                                                 ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ lsflag.png  secret                                                                                                                                                                        ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ cd secret                                                                                                                                                                           ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files/secret]‚îî‚îÄ$ lsflag.pngNow, Just you have to open flag.png.Yeah, we got the flag :  Flag : picoCTF{Hiddinng_An_imag3_within_@n_ima9e_82101824}PcapPoisoningHere is the given challenge :Lets download the file‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ lsflag.png  secret  trace.pcap                                                                                                                                                                        ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ file trace.pcap trace.pcap: pcap capture file, microsecond ts (little-endian) - version 2.4 (Raw IPv4, capture length 65535)This is a pcap file. So, We have to check through wireshark. But if possible we can find the flag using command grep.just checking with command : strings trace.pcap | grep -i \"pico\"‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ strings trace.pcap | grep -i \"pico\"picoCTF{P64P_4N4L7S1S_SU55355FUL_31010c46}Yayyyüòâ!, We got the flag :  Flag : picoCTF{P64P_4N4L7S1S_SU55355FUL_31010c46}Reverse Engineering :ReverseHere is the given challenge :Lets download the file and check file type with exiftool‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ file retret: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7f12d7198b75bd4d9f159e7a45141d4f13836e51, for GNU/Linux 3.2.0, not stripped                                                                                                                                                                                                ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ exiftool ret           ExifTool Version Number         : 12.57File Name                       : retDirectory                       : .File Size                       : 17 kBFile Modification Date/Time     : 2023:03:30 12:41:59+01:00File Access Date/Time           : 2023:03:30 12:42:27+01:00File Inode Change Date/Time     : 2023:03:30 12:42:01+01:00File Permissions                : -rw-r--r--File Type                       : ELF shared libraryFile Type Extension             : soMIME Type                       : application/octet-streamCPU Architecture                : 64 bitCPU Byte Order                  : Little endianObject File Type                : Shared object fileCPU Type                        : AMD x86-64Cool, It is an executable file, Once again we can check with the command strings ret | grep -i \"pico\"We got the flag,  Flag :  picoCTF{3lf_r3v3r5ing_succe55ful_fa9cb3b1}Safe Opener 2Here is the given challenge :Lets download the file and check file type with exiftool‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ file SafeOpener.class SafeOpener.class: compiled Java class data, version 52.0 (Java 1.8)                                                                                                                                                                                                ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ exiftool SafeOpener.class ExifTool Version Number         : 12.57File Name                       : SafeOpener.classDirectory                       : .File Size                       : 2.0 kBFile Modification Date/Time     : 2023:03:30 12:46:01+01:00File Access Date/Time           : 2023:03:30 12:46:24+01:00File Inode Change Date/Time     : 2023:03:30 12:46:16+01:00File Permissions                : -rw-r--r--File Type                       : Java bytecodeFile Type Extension             : classMIME Type                       : application/java-byte-codeJust like before challenge, We‚Äôll be checking with the strings command :strings SafeOpener.class | grep -i \"pico\"Coooooool, we got the flag.  Flag : picoCTF{SAf3_0p3n3rr_y0u_solv3d_it_198203f7}Binary Exploitation :Two-SumHere is the given challenge :Trying it locally works and the reason is beacause the maximum value of a signed integer is 2147483647 so giving it 1 goes above the maximum value.‚îå‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ‚îÄ‚ïº $nc saturn.picoctf.net 52197.n1 &gt; n1 + n2 OR n2 &gt; n1 + n2 What two positive numbers can make this possible: 21474836471You entered 2147483647 and 1You have an integer overflowYOUR FLAG IS: picoCTF{Tw0_Sum_Integer_Bu773R_0v3rfl0w_fe14e9e9}Yahooo !, We got the flagüòé  Flag : picoCTF{Tw0_Sum_Integer_Bu773R_0v3rfl0w_bc0adfd1}",
            "content_html": "<p>Hi Mates!</p><p>I participated in the <a>picoCTF 2023</a> organized by <a style=\"color:cyan;\" href=\"https://www.cmu.edu/\">Carnegie Mellon University</a>, Which was run from Mar 14 2023 to Mar 28 2023. PicoCTF is a free online cybersecurity competition aimed at middle and high school students, but it‚Äôs also suitable for beginners of all ages. It was a great learning experience and I really learnt a lot.</p><p>Let me explain the challenges that I have solved in picoCTF 2023.</p><h2 id=\"general-skills-\"><a>General Skills :</a></h2><p>I solved all the challenges that were given !</p><h3 id=\"chrono\">Chrono</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/chrono.png\" alt=\"chrono\" width=\"450\" /></p><p>Firstly, We have to launch the instance and connect to the server with given credentials.</p><p>Based on the question prompt it had to be <code class=\"language-plaintext highlighter-rouge\">cron jobs</code>.</p><p>After various attempts to access crontab itself, I tried looking inside <code class=\"language-plaintext highlighter-rouge\">/etc/crontab</code> with the <code class=\"language-plaintext highlighter-rouge\">cat</code> command.</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{Sch3DUL7NG_T45K3_L1NUX_1b4d8744}</code></p></blockquote><hr /><h3 id=\"money-ware\">Money-ware</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/money-ware.png\" alt=\"money-ware\" /></p><p>I don‚Äôt know what it is but i‚Äôm googling <a>1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX</a>, I got the link which had reports with descriptions and one of those descriptions points us to:</p><p>More information is here : <a href=\"https://blog.avira.com/petya-strikes-back/\" target=\"_blank\"> https://blog.avira.com/petya-strikes-back/ </a></p><p>This is an article about a vulnerability called <code class=\"language-plaintext highlighter-rouge\">Petya</code> so our answer should be:</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{petya}</code></p></blockquote><hr /><h3 id=\"permissions\">Permissions</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/permissions.png\" alt=\"permissions\" /></p><p>We have to connect the server and <code class=\"language-plaintext highlighter-rouge\">cd / </code>, I saw a directory named challenge, inside it there was a file which when cating it game the flag.</p><p><img src=\"/assets/img/post_img/permissions1.png\" alt=\"solution\" /></p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{uS1ng_v1m_3dit0r_021d10ab}</code></p></blockquote><hr /><h3 id=\"repetitions\">Repetitions</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/repetitions.png\" alt=\"repetitions\" width=\"440\" /></p><p>The file itself looks like standard base64 encoding and decoding it will give you the flag use <code class=\"language-plaintext highlighter-rouge\">cyberchef</code>.I had to decode with <code class=\"language-plaintext highlighter-rouge\">base64</code> six times to get the flag üòÇ</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{base64_n3st3d_dic0d!n8_d0wnl04d3d_dfe803c6}</code></p></blockquote><hr /><h3 id=\"useless\">Useless</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/useless.png\" alt=\"useless\" /></p><p>In the home directory there is a file named useless.</p><p>After running the command <code class=\"language-plaintext highlighter-rouge\">man useless</code></p><p>We got the flag,</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{us3l3ss_ch4ll3ng3_3xpl0it3d_3555}</code></p></blockquote><hr /><h3 id=\"special\">Special</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/specialer.png\" alt=\"Special\" /></p><p>This challenge was hard and to come with this bash script.</p><p>My solution was as follows:<code class=\"language-plaintext highlighter-rouge\">cat flag.txt | cat /home/ctf-player/*/*.txt</code></p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{5p311ch3ck_15_7h3_w0r57_a60bdf40}</code></p></blockquote><p>*** <br /></p><h3 id=\"specialer\">Specialer</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/special.png\" alt=\"Specialer\" /></p><p>Connecting into the shell we‚Äôre not allowed a lot of things like <code class=\"language-plaintext highlighter-rouge\">cat, ls....</code></p><p>After a lot of tries,</p><p>My solution was as follows:<code class=\"language-plaintext highlighter-rouge\">echo \"$( &lt; /home/ctf-player/ala/kazam.txt)\"</code></p><p>Now we got the flag :</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{5p311ch3ck_15_7h3_w0r57_a60bdf40}</code></p></blockquote><hr /><h2 id=\"cryptographhy-\"><a>Cryptographhy :</a></h2><p>Although I couldn‚Äôt solve all the challenges, I managed to solve some of the challenges that I knew how to do!</p><h3 id=\"hidetosee\">HideToSee</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/hidetosee.png\" alt=\"HideToSee\" /></p><p>Lets download the file.</p><p>This is a jpeg file. We‚Äôll be using a tool called <code class=\"language-plaintext highlighter-rouge\">steghide</code> to extract information from this jpeg file, Use : <code class=\"language-plaintext highlighter-rouge\">steghide -sf --extract atbash.jpg</code></p><p>Here we got a text file called <code class=\"language-plaintext highlighter-rouge\">encrypted.txt</code>, Use : <code class=\"language-plaintext highlighter-rouge\">cat encrypted.txt</code></p><p><code class=\"language-plaintext highlighter-rouge\">krxlXGU{zgyzhs_xizxp_8z0uvwwx}</code></p><p>It looks like flag but it‚Äôs not.</p><p>Now just need to decode atbash and you‚Äôre done</p><p>We got the flag,</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{atbash_crack_6c4bcb08}</code></p></blockquote><hr /><h3 id=\"readmycert\">ReadMyCert</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/readmycert.png\" alt=\"ReadMyCert\" /></p><p>Lets download the file.</p><p>From the hint we were try to read the file. Bang !!<img src=\"/assets/img/post_img/readmycert1.png\" alt=\"ReadMyCert\" /></p><p>And the flag is,</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{read_mycert_41d1c74c}</code></p></blockquote><hr /><h3 id=\"rotation\">Rotation</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/rotation.png\" alt=\"rotation\" /></p><p>Lets download the file and open with <code class=\"language-plaintext highlighter-rouge\">cat encrypted.txt</code></p><p><code class=\"language-plaintext highlighter-rouge\">xqkwKBN{z0bib1wv_l3kzgxb3l_555957n3}</code></p><p>We got another encrypted text having the flag format. I got to know that this is a <code class=\"language-plaintext highlighter-rouge\">caesar cipher</code>, so I used to decrypt with this <a href=\"https://www.boxentriq.com/code-breaking/caesar-cipher\" target=\"_blank\">online tool</a></p><p>It is a simple Rotation cipher, brute-forcing works fine.</p><p>Here is the flag,</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{r0tat1on_d3crypt3d_949af1a1}</code></p></blockquote><hr /><h2 id=\"forensics-\"><a>Forensics :</a></h2><h3 id=\"hideme\">Hideme</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/hideme.png\" alt=\"rotation\" /></p><p>Lets download the file and check file type with <code class=\"language-plaintext highlighter-rouge\">exiftool</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ file flag.png        flag.png: PNG image data, 512 x 504, 8-bit/color RGBA, non-interlaced                                                                                                                                                                        ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ exiftool flag.png        ExifTool Version Number         : 12.57File Name                       : flag.pngDirectory                       : .File Size                       : 43 kBFile Modification Date/Time     : 2023:03:22 19:38:37+01:00File Access Date/Time           : 2023:03:22 19:38:53+01:00File Inode Change Date/Time     : 2023:03:22 19:38:48+01:00File Permissions                : -rw-r--r--File Type                       : PNGFile Type Extension             : pngMIME Type                       : image/pngImage Width                     : 512Image Height                    : 504Bit Depth                       : 8Color Type                      : RGB with AlphaCompression                     : Deflate/InflateFilter                          : AdaptiveInterlace                       : NoninterlacedWarning                         : [minor] Trailer data after PNG IEND chunkImage Size                      : 512x504Megapixels                      : 0.258</code></pre></div></div><p>This is a PNG, So we can observe the header using a tool called <code class=\"language-plaintext highlighter-rouge\">zsteg</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ‚îÄ‚ïº $zsteg flag.png [?] 3191 bytes of extra data after image end (IEND), offset = 0x9b3bextradata:0         .. file: Zip archive data, at least v1.0 to extract    00000000: 50 4b 03 04 0a 00 00 00  00 00 3a 10 70 56 00 00  |PK........:.pV..|    00000010: 00 00 00 00 00 00 00 00  00 00 07 00 1c 00 73 65  |..............se|    00000020: 63 72 65 74 2f 55 54 09  00 03 8f 78 12 64 8f 78  |cret/UT....x.d.x|    00000030: 12 64 75 78 0b 00 01 04  00 00 00 00 04 00 00 00  |.dux............|    00000040: 00 50 4b 03 04 14 00 00  00 08 00 3a 10 70 56 67  |.PK........:.pVg|    00000050: 45 23 b5 35 0b 00 00 d0  0b 00 00 0f 00 1c 00 73  |E#.5...........s|    00000060: 65 63 72 65 74 2f 66 6c  61 67 2e 70 6e 67 55 54  |ecret/flag.pngUT|    00000070: 09 00 03 8f 78 12 64 8f  78 12 64 75 78 0b 00 01  |....x.d.x.dux...|    00000080: 04 00 00 00 00 04 00 00  00 00 cd 56 59 3c 14 fc  |...........VY&lt;..|    00000090: 1a fe 87 b2 26 1f 22 5b  a3 65 1a 59 c6 30 76 33  |....&amp;.\"[.e.Y.0v3|    000000a0: c4 47 92 35 44 f6 35 bb  6c 43 1a 65 64 49 85 10  |.G.5D.5.lC.edI..|    000000b0: 45 d9 3e 6a ec 63 9d 21  64 df 69 08 23 fb 12 45  |E.&gt;j.c.!d.i.#..E|    000000c0: f6 65 2c 8d 8a 33 e7 77  ae ce c5 b9 3f ef c5 fb  |.e,..3.w....?...|    000000d0: bc db 73 f7 fe 9e df f3  cc d8 50 e7 34 9b 20 1b  |..s.......P.4. .|    000000e0: 00 e0 b4 ee 0d 2d 13 00  18 ee d0 6b 59 2e 7a 02  |.....-.....kY.z.|    000000f0: 7b 3e 57 cc e9 c0 e4 a6  61 a0 01 40 45 02 fb 6f  |{&gt;W.....a..@E..o|</code></pre></div></div><p>Interesting üòé. So, I went ahead to unzip command : <code class=\"language-plaintext highlighter-rouge\">unzip flag.png</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ unzip flag.png                          Archive:  flag.pngwarning [flag.png]:  39739 extra bytes at beginning or within zipfile  (attempting to process anyway)   creating: secret/  inflating: secret/flag.png                                                                                                                                                                                 ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ lsflag.png  secret                                                                                                                                                                        ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ cd secret                                                                                                                                                                           ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files/secret]‚îî‚îÄ$ lsflag.png</code></pre></div></div><p>Now, Just you have to open <code class=\"language-plaintext highlighter-rouge\">flag.png</code>.</p><p>Yeah, we got the flag :</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{Hiddinng_An_imag3_within_@n_ima9e_82101824}</code></p></blockquote><hr /><h3 id=\"pcappoisoning\">PcapPoisoning</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/pcappoisoning.png\" alt=\"rotation\" /></p><p>Lets download the file</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ lsflag.png  secret  trace.pcap                                                                                                                                                                        ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ file trace.pcap trace.pcap: pcap capture file, microsecond ts (little-endian) - version 2.4 (Raw IPv4, capture length 65535)</code></pre></div></div><p>This is a pcap file. So, We have to check through <code class=\"language-plaintext highlighter-rouge\">wireshark</code>. But if possible we can find the flag using command <code class=\"language-plaintext highlighter-rouge\">grep</code>.</p><p>just checking with command : <code class=\"language-plaintext highlighter-rouge\">strings trace.pcap | grep -i \"pico\"</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ strings trace.pcap | grep -i \"pico\"picoCTF{P64P_4N4L7S1S_SU55355FUL_31010c46}</code></pre></div></div><p>Yayyyüòâ!, We got the flag :</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{P64P_4N4L7S1S_SU55355FUL_31010c46}</code></p></blockquote><hr /><h2 id=\"reverse-engineering-\"><a>Reverse Engineering :</a></h2><h3 id=\"reverse\">Reverse</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/reverse.png\" alt=\"rotation\" /></p><p>Lets download the file and check file type with <code class=\"language-plaintext highlighter-rouge\">exiftool</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ file retret: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7f12d7198b75bd4d9f159e7a45141d4f13836e51, for GNU/Linux 3.2.0, not stripped                                                                                                                                                                                                ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ exiftool ret           ExifTool Version Number         : 12.57File Name                       : retDirectory                       : .File Size                       : 17 kBFile Modification Date/Time     : 2023:03:30 12:41:59+01:00File Access Date/Time           : 2023:03:30 12:42:27+01:00File Inode Change Date/Time     : 2023:03:30 12:42:01+01:00File Permissions                : -rw-r--r--File Type                       : ELF shared libraryFile Type Extension             : soMIME Type                       : application/octet-streamCPU Architecture                : 64 bitCPU Byte Order                  : Little endianObject File Type                : Shared object fileCPU Type                        : AMD x86-64</code></pre></div></div><p>Cool, It is an executable file, Once again we can check with the command <code class=\"language-plaintext highlighter-rouge\">strings ret | grep -i \"pico\"</code></p><p>We got the flag,</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag :  picoCTF{3lf_r3v3r5ing_succe55ful_fa9cb3b1}</code></p></blockquote><hr /><h3 id=\"safe-opener-2\">Safe Opener 2</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/safeopener2.png\" alt=\"rotation\" /></p><p>Lets download the file and check file type with <code class=\"language-plaintext highlighter-rouge\">exiftool</code></p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ file SafeOpener.class SafeOpener.class: compiled Java class data, version 52.0 (Java 1.8)                                                                                                                                                                                                ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ$ exiftool SafeOpener.class ExifTool Version Number         : 12.57File Name                       : SafeOpener.classDirectory                       : .File Size                       : 2.0 kBFile Modification Date/Time     : 2023:03:30 12:46:01+01:00File Access Date/Time           : 2023:03:30 12:46:24+01:00File Inode Change Date/Time     : 2023:03:30 12:46:16+01:00File Permissions                : -rw-r--r--File Type                       : Java bytecodeFile Type Extension             : classMIME Type                       : application/java-byte-code</code></pre></div></div><p>Just like before challenge, We‚Äôll be checking with the strings command :<code class=\"language-plaintext highlighter-rouge\">strings SafeOpener.class | grep -i \"pico\"</code></p><p>Coooooool, we got the flag.</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{SAf3_0p3n3rr_y0u_solv3d_it_198203f7}</code></p></blockquote><hr /><h2 id=\"binary-exploitation-\"><a>Binary Exploitation :</a></h2><h3 id=\"two-sum\">Two-Sum</h3><p>Here is the given challenge :</p><p><img src=\"/assets/img/post_img/two-sum.png\" alt=\"rotation\" /></p><p>Trying it locally works and the reason is beacause the maximum value of a signed integer is <code class=\"language-plaintext highlighter-rouge\">2147483647</code> so giving it <code class=\"language-plaintext highlighter-rouge\">1</code> goes above the maximum value.</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/task_files]‚îî‚îÄ‚îÄ‚ïº $nc saturn.picoctf.net 52197.n1 &gt; n1 + n2 OR n2 &gt; n1 + n2 What two positive numbers can make this possible: 21474836471You entered 2147483647 and 1You have an integer overflowYOUR FLAG IS: picoCTF{Tw0_Sum_Integer_Bu773R_0v3rfl0w_fe14e9e9}</code></pre></div></div><p>Yahooo !, We got the flagüòé</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : picoCTF{Tw0_Sum_Integer_Bu773R_0v3rfl0w_bc0adfd1}</code></p></blockquote><hr />",
            "url": "https://th3m4r10.github.io/2023/04/04/picoctf2023",
            
            
            
            
            
            "date_published": "2023-04-04T00:00:00+00:00",
            "date_modified": "2023-04-04T00:00:00+00:00",
            
                "author":  {
                "name": "M4r10",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://th3m4r10.github.io/2023/04/02/vishwactf",
            "title": "VishwaCTF",
            "summary": null,
            "content_text": "Hi, Hello!I played VishwaCTF 2023 which was organised by CyberCellVIIT along with team Invaders0x1.Here is one of the challenge I have solved from #WEB categoryPayloadHere is the challenge deployment :We were given a button on the webserver which when pressed gave me the info about the system details.So again dirsearch found robots.txt on the website which when accessed gave me the source code having if else condition mentioning cmd and btn.So as we press the system details button we see that in the url /?btn= appears so simply i changed btn to cmd and to check for if the commands work i tried ?cmd=lsIt gave me the files inside the directory index.html, index.php and one more file forgot the name. So i simply used command ?cmd=cat+index.phpTo notice I wasnt getting the flag anywhere instead the site was getting rendered so I decided to use an alt for cat command and I did the changes ?cmd=tac index.phpand there we go, I found the whole source code with the flag.Here is the hidden deatails of the deploymemnt which includes flag !?&gt; } } system(\"uname -a\"); echo \"System Details: \"; if(isset($_GET['btn'])){ else { } system($_GET['cmd']); if(isset($_GET['cmd'])){ putenv(\"FLAG=VishwaCTF{y0u_f-o-u-n-d_M3}\");  FLAG : VishwaCTF{y0u_f-o-u-n-d_M3}",
            "content_html": "<p>Hi, Hello!</p><p>I played <a>VishwaCTF 2023</a> which was organised by <a href=\"https://ctftime.org/team/144677\" style=\"color:cyan;\">CyberCellVIIT</a> along with team <a>Invaders0x1</a>.</p><p>Here is one of the challenge I have solved from <code class=\"language-plaintext highlighter-rouge\">#WEB</code> category</p><h3 id=\"payload\">Payload</h3><p>Here is the challenge deployment :</p><p><img src=\"/assets/img/post_img/payload.png\" alt=\"Payload\" /></p><p>We were given a button on the webserver which when pressed gave me the info about the system details.</p><p>So again dirsearch found robots.txt on the website which when accessed gave me the source code having if else condition mentioning cmd and btn.</p><p>So as we press the system details button we see that in the url /?btn= appears so simply i changed btn to cmd and to check for if the commands work i tried <code class=\"language-plaintext highlighter-rouge\">?cmd=ls</code></p><p><img src=\"/assets/img/post_img/payload1.png\" alt=\"Payload\" /></p><p>It gave me the files inside the directory index.html, index.php and one more file forgot the name. So i simply used command <code class=\"language-plaintext highlighter-rouge\">?cmd=cat+index.php</code></p><p>To notice I wasnt getting the flag anywhere instead the site was getting rendered so I decided to use an alt for cat command and I did the changes <code class=\"language-plaintext highlighter-rouge\">?cmd=tac index.php</code></p><p>and there we go, I found the whole source code with the flag.</p><p><img src=\"/assets/img/post_img/payload2.png\" alt=\"Payload\" /></p><p>Here is the hidden deatails of the deploymemnt which includes <code class=\"language-plaintext highlighter-rouge\">flag</code> !</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>?&gt; } } system(\"uname -a\"); echo \"System Details: \"; if(isset($_GET['btn'])){ else { } system($_GET['cmd']); if(isset($_GET['cmd'])){ putenv(\"FLAG=VishwaCTF{y0u_f-o-u-n-d_M3}\");</code></pre></div></div><p><br /></p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">FLAG : VishwaCTF{y0u_f-o-u-n-d_M3}</code></p></blockquote>",
            "url": "https://th3m4r10.github.io/2023/04/02/vishwactf",
            
            
            
            
            
            "date_published": "2023-04-02T00:00:00+00:00",
            "date_modified": "2023-04-02T00:00:00+00:00",
            
                "author":  {
                "name": "M4r10",
                "url": null,
                "avatar": null
                }
                
            
        },
    
        {
            "id": "https://th3m4r10.github.io/2023/03/20/wolvctf",
            "title": "WolvCTF 2023",
            "summary": null,
            "content_text": "Hi friends!It‚Äôs my first CTF. Feeling excited and a little bit worrying too !I played WolvCTF 2023 which was organized by WolvSec along with my team Invaders0x1. And it was held from 17 March 2023, 20:00 UTC ‚Äî Sun, 19 March 2023, 20:00Let me explain the challenges I have solved in WolvCTF 2023.Charlotte‚Äôs Web‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ curl https://charlotte-tlejfksioa-ul.a.run.app/                                           &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;index&lt;/title&gt;&lt;script&gt;  function start() {    alert(\"where's the flag? i swear it was around here somewhere\");  }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;button onclick='start()'&gt;click me for the flag&lt;/button&gt;&lt;!-- /src --&gt;&lt;/body&gt;&lt;/html&gt;                                                                                                                                                                             ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ curl https://charlotte-tlejfksioa-ul.a.run.app/srcimport flaskapp = flask.Flask(__name__)@app.route('/', methods=['GET'])def index():  return flask.send_file('index.html')@app.route('/src', methods=['GET'])def source():  return flask.send_file('app.py')@app.route('/super-secret-route-nobody-will-guess', methods=['PUT'])def flag():  return open('flag').read()                                                                                                                                                                                      ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ curl https://charlotte-tlejfksioa-ul.a.run.app//super-secret-route-nobody-will-guess -X PUTwctf{y0u_h4v3_b33n_my_fr13nd___th4t_1n_1t53lf_1s_4_tr3m3nd0u5_th1ng}    Flag : wctf{y0u_h4v3_b33n_my_fr13nd___th4t_1n_1t53lf_1s_4_tr3m3nd0u5_th1ng}Baby restrings baby-re | grep wctfwctf{Oh10_Stat3_1s_Smelly!}wctf{Must_be_fr0m_OSU}wctf{A_t0tally_fake_flag}By guessing I took wctf{Oh10_Stat3_1s_Smelly!} and It was the right flag  Flag : wctf{Oh10_Stat3_1s_Smelly!}We will rock youThe challenge gave us a protected zip file. Then, we crack it with john and the rockyou wordlist :‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ zip2john we_will_rock_you.zip &gt; zip.hashes                 Created directory: /home/kali/.johnver 1.0 we_will_rock_you.zip/we_will_rock_you/ is not encrypted, or stored with non-handled compression typever 1.0 efh 5455 efh 7875 we_will_rock_you.zip/we_will_rock_you/flag.txt PKZIP Encr: 2b chk, TS_chk, cmplen=33, decmplen=21, crc=7D20D45F ts=B816 cs=b816 type=0                                                                                                                                                                                      ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ john --wordlist=/usr/share/wordlists/rockyou.txt zip.hashesUsing default input encoding: UTF-8Loaded 1 password hash (PKZIP [32/64])Will run 2 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusmichigan4ever    (we_will_rock_you.zip/we_will_rock_you/flag.txt)     1g 0:00:00:00 DONE (2023-03-20 17:35) 1.176g/s 6548Kp/s 6548Kc/s 6548KC/s mickovgys..michellsmgUse the \"--show\" option to display all of the cracked passwords reliablySession completed. ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ cat we_will_rock_you/flag.txt wctf{m1cH1g4n_4_3v3R}   Flag : wctf{m1cH1g4n_4_3v3R}",
            "content_html": "<p>Hi friends!</p><p>It‚Äôs my first CTF. Feeling excited and a little bit worrying too !</p><p>I played <a href=\"https://wolvctf.io/\">WolvCTF</a> 2023 which was organized by <a style=\"color: cyan;\" href=\"https://wolvsec.org/\">WolvSec</a> along with my team <a href=\"https://ctftime.org/team/217079\" target=\"_blank\">Invaders0x1</a>. And it was held from 17 March 2023, 20:00 UTC ‚Äî Sun, 19 March 2023, 20:00</p><p>Let me explain the challenges I have solved in WolvCTF 2023.</p><h3 id=\"charlottes-web\">Charlotte‚Äôs Web</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ curl https://charlotte-tlejfksioa-ul.a.run.app/                                           &lt;!DOCTYPE html&gt;&lt;html&gt;&lt;head&gt;&lt;title&gt;index&lt;/title&gt;&lt;script&gt;  function start() {    alert(\"where's the flag? i swear it was around here somewhere\");  }&lt;/script&gt;&lt;/head&gt;&lt;body&gt;&lt;button onclick='start()'&gt;click me for the flag&lt;/button&gt;&lt;!-- /src --&gt;&lt;/body&gt;&lt;/html&gt;                                                                                                                                                                             ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ curl https://charlotte-tlejfksioa-ul.a.run.app/srcimport flaskapp = flask.Flask(__name__)@app.route('/', methods=['GET'])def index():  return flask.send_file('index.html')@app.route('/src', methods=['GET'])def source():  return flask.send_file('app.py')@app.route('/super-secret-route-nobody-will-guess', methods=['PUT'])def flag():  return open('flag').read()                                                                                                                                                                                      ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ curl https://charlotte-tlejfksioa-ul.a.run.app//super-secret-route-nobody-will-guess -X PUTwctf{y0u_h4v3_b33n_my_fr13nd___th4t_1n_1t53lf_1s_4_tr3m3nd0u5_th1ng}  </code></pre></div></div><p><br /></p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : wctf{y0u_h4v3_b33n_my_fr13nd___th4t_1n_1t53lf_1s_4_tr3m3nd0u5_th1ng}</code></p></blockquote><hr /><h3 id=\"baby-re\">Baby re</h3><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>strings baby-re | grep wctfwctf{Oh10_Stat3_1s_Smelly!}wctf{Must_be_fr0m_OSU}wctf{A_t0tally_fake_flag}</code></pre></div></div><p>By guessing I took <code class=\"language-plaintext highlighter-rouge\">wctf{Oh10_Stat3_1s_Smelly!}</code> and It was the right flag</p><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : wctf{Oh10_Stat3_1s_Smelly!}</code></p></blockquote><hr /><h3 id=\"we-will-rock-you\">We will rock you</h3><p>The challenge gave us a protected zip file. Then, we crack it with john and the rockyou wordlist :</p><div class=\"language-plaintext highlighter-rouge\"><div class=\"highlight\"><pre class=\"highlight\"><code>‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ zip2john we_will_rock_you.zip &gt; zip.hashes                 Created directory: /home/kali/.johnver 1.0 we_will_rock_you.zip/we_will_rock_you/ is not encrypted, or stored with non-handled compression typever 1.0 efh 5455 efh 7875 we_will_rock_you.zip/we_will_rock_you/flag.txt PKZIP Encr: 2b chk, TS_chk, cmplen=33, decmplen=21, crc=7D20D45F ts=B816 cs=b816 type=0                                                                                                                                                                                      ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ john --wordlist=/usr/share/wordlists/rockyou.txt zip.hashesUsing default input encoding: UTF-8Loaded 1 password hash (PKZIP [32/64])Will run 2 OpenMP threadsPress 'q' or Ctrl-C to abort, almost any other key for statusmichigan4ever    (we_will_rock_you.zip/we_will_rock_you/flag.txt)     1g 0:00:00:00 DONE (2023-03-20 17:35) 1.176g/s 6548Kp/s 6548Kc/s 6548KC/s mickovgys..michellsmgUse the \"--show\" option to display all of the cracked passwords reliablySession completed. ‚îå‚îÄ‚îÄ[m4r10@parrot]‚îÄ[/media/sf_CyberSec/CTF/WolvCTF]‚îî‚îÄ$ cat we_will_rock_you/flag.txt wctf{m1cH1g4n_4_3v3R} </code></pre></div></div><blockquote>  <p><code class=\"language-plaintext highlighter-rouge\">Flag : wctf{m1cH1g4n_4_3v3R}</code></p></blockquote>",
            "url": "https://th3m4r10.github.io/2023/03/20/wolvctf",
            
            
            
            
            
            "date_published": "2023-03-20T00:00:00+00:00",
            "date_modified": "2023-03-20T00:00:00+00:00",
            
                "author":  {
                "name": "M4r10",
                "url": null,
                "avatar": null
                }
                
            
        }
    
    ]
}