<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

 <title>M4r10's Blog</title>
 <link href="https://th3m4r10.github.io/atom.xml" rel="self"/>
 <link href="https://th3m4r10.github.io/"/>
 <updated>2023-07-22T11:33:54+00:00</updated>
 <id>https://th3m4r10.github.io</id>
 <author>
   <name>M4r10</name>
   <email>muraligari2365@gmail.com</email>
 </author>

 
 <entry>
   <title>Novel Cryptography Project</title>
   <link href="https://th3m4r10.github.io/2023/07/15/novel-cryptography-project-md"/>
   <updated>2023-07-15T00:00:00+00:00</updated>
   <id>https://th3m4r10.github.io/2023/07/15/novel-cryptography-project.md</id>
   <content type="html">&lt;p&gt;Hello, everyone!&lt;/p&gt;

&lt;p&gt;It has been a long time, but I am back again with an exciting cryptography-based project!&lt;/p&gt;

&lt;p&gt;This project combines multiple trending technologies, including Hybrid Cryptography, Multikey Cryptography, Video Communication, Real-time Streaming, Elliptic Curve Cryptography (ECC), AES Encryption, Client-Server Model, Socket Programming, Flask, SQLAlchemy, RSA, and Key Generation.&lt;/p&gt;

&lt;p&gt;Sounds interesting, right? Allow me to provide a brief introduction to this project.&lt;/p&gt;

&lt;h1 id=&quot;a-novel-hybrid-multikey-cryptography-technique-for-video-communication-with-client-server-model&quot;&gt;A Novel Hybrid Multikey Cryptography Technique for Video Communication with Client-Server Model&lt;/h1&gt;

&lt;p&gt;Protecting copyright and preventing piracy has become a crucial concern in real-time video streaming systems. This research project presents a revolutionary multi-key and hybrid cryptography approach to provide enhanced security for video communication.&lt;/p&gt;

&lt;p&gt;The project implements a software solution for video encryption and decryption using a continuous system based on the Elliptic Curve Cryptography (ECC) approach as pseudorandom encryption key generators. This approach generates multiple keys to encrypt and decrypt small chunks of video files dynamically, based on the video data. The implementation follows a client-server model utilizing socket programming.&lt;/p&gt;

&lt;h3 id=&quot;video-walkthrough&quot;&gt;Video Walkthrough&lt;/h3&gt;
&lt;video width=&quot;100%&quot; height=&quot;100%&quot; controls=&quot;&quot;&gt;
  &lt;source src=&quot;/assets/vid/demo.webm&quot; type=&quot;video/mp4&quot; /&gt;
  Your browser does not support the video tag
&lt;/video&gt;

&lt;h2 id=&quot;project-flow&quot;&gt;Project Flow&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;User Registeration&lt;/p&gt;

    &lt;p&gt;Here users input their email, password, MAC address, and import their public key on a Flask-developed web page. User data, including the public key, is securely stored in a SQLAlchemy database for future authentication and authorization.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;User Login and Dashboard&lt;/p&gt;

    &lt;p&gt;Here Users login using their credentials, upon successful login, the dashboard displays video thumbnails, and provides a download button to obtain the client software for connecting to the streaming server.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Server Side Key Generation&lt;/p&gt;

    &lt;p&gt;The keys which are used to encrypt the video chunks are generated from the ECC equation.  First AES key is generated from the ECC equation which involves Video ID, remaining keys will be generated from the ECC equation which includes the previous key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Video Encryption at Server Side&lt;/p&gt;

    &lt;p&gt;The encryption is done for the each video chunk individually. The 0th indexed chunk will be encrypted using the RSA with the receivers public key. The 1st indexed video chunk will be encrypted with the AES using the key generated from the ECC equation which involves VID, remaining chunks will be encrypted with AES and the keys generated from ECC equation which includes previously generated ECC key.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Sending Encrypted Video through Sockets&lt;/p&gt;

    &lt;p&gt;Encrypted video is transmitted over sockets using the client-server model. The video data is encrypted on the server side using a hybrid multikey cryptography technique and sent securely to the client for decryption, ensuring confidentiality during transmission.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Receiving Encrypted Video through Sockets&lt;/p&gt;

    &lt;p&gt;Encrypted video is received through sockets in the hybrid multikey cryptography technique. The server receives the encrypted video data, which is then decrypted using the shared session key, ensuring confidentiality and enabling playback or further processing of the video content.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Client Execution&lt;/p&gt;

    &lt;p&gt;During Client Execution, users run the client.py script on their local machine. The server requests the user to provide their email and password for verification. If the credentials entered match the ones used during registration, the server grants access and presents the user with a list of available videos.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Additional Authentication&lt;/p&gt;

    &lt;p&gt;In addition to the login credentials, users are prompted to enter their MAC address during authentication. This additional step helps to enhance security by verifying the user’s identity and ensuring that the device they are using is authorized for access.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Private Key Import&lt;/p&gt;

    &lt;p&gt;In order to decrypt a received video from the server, the user is prompted to provide the path to their private key. This private key is necessary to unlock the encryption applied to the video. By importing the private key, the user can authenticate themselves and gain access to the encrypted content, enabling them to view the video in its original form.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Key Generation at client&lt;/p&gt;

    &lt;p&gt;The keys will be generated in the same way they generated at the server side during the encryption.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Video Decryption and Playback:&lt;/p&gt;

    &lt;p&gt;The video will be decrypted if the private key and MAC address of the user is reasonable. Once decrypted, the video is rendered and displayed by a media player, allowing users to watch it without significant delays or interruptions. This encryption and playback process safeguards copyrighted material and maintains content security and integrity..&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&quot;encryption-flow&quot;&gt;Encryption Flow&lt;/h2&gt;

&lt;p&gt;The video file encrypion flow as follows.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;1. Input video file Vinput
2. Generate video chunks Vci from Vinput
3. Fetch the receiver&apos;s public key of the RPkey
4. Collect receiver&apos;s MAC address Rmac
5. Generate VID using Vc0
6. Store VID in a temporary file
7. Encrypt Vc0 using RSA
8. Generate Keya ← x^3 + VID * x + Rmac
9. Encrypt Vc1 using Keya and AES
10. for i := 2 to n do
11.    Generate Keya ← x^3 + Keya * x + Rmac
12.    Encrypt Vci using Keya and AES
13. end for
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h2 id=&quot;internal-processes&quot;&gt;Internal Processes:&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;User Registration:
    &lt;ul&gt;
      &lt;li&gt;During registration, users are required to import their public key, along with their email, password, and MAC address.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Encryption&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/encryption.png&quot; alt=&quot;Video Encryption&quot; /&gt;
   The server-side encryption involves AES encryption of each 1MB chunk of the video file.
}&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Key generation:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/key-generation.png&quot; alt=&quot;keygeneration&quot; /&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The encryption key used for AES is generated using a novel key generation technique that combines RSA and ECC.&lt;/li&gt;
  &lt;li&gt;Decryption
    &lt;ul&gt;
      &lt;li&gt;The decryption was done at the client side same key generation was used here.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;analysis-of-results&quot;&gt;Analysis of Results&lt;/h2&gt;

&lt;h3 id=&quot;time-to-generate-keys&quot;&gt;Time to generate keys&lt;/h3&gt;

&lt;p&gt;To determine the impact of the multi-key in the encryption and decryption process, the time required to generate the key was calculated in this experiment. The method and equation used to derive the keys are the same for both encryption and
decryption. So, for the sake of analysis, the delay calculated for encryption has been employed in this part. The receiver’s public key and partial video data serve as the basis for the key used to encrypt the first video chunk. The remaining keys are obtained using the receiver’s MAC address, public key, and previously computed key. Since the length of the parameters is consistent during this procedure, the time between each key does not vary much.&lt;/p&gt;

&lt;h3 id=&quot;time-to-encrypt-video-chunks&quot;&gt;Time to encrypt video chunks&lt;/h3&gt;

&lt;p&gt;This section has talked about how long it takes to encrypt each chunk. Although the video processing modules split the video file into chunks for each full frame, the implementation assumes the chunk size to be 1 MB. The video chunks are fed into the AES module before being transmitted. The chunks are mostly the same in that it varies between 1MB and 1.2MB, and the time taken to encrypt each also varies between 0.9 sec to 1.2 sec.&lt;/p&gt;

&lt;h3 id=&quot;number-of-keys-generated&quot;&gt;Number of keys generated&lt;/h3&gt;

&lt;p&gt;The number of keys generated depends on the quantity of generated video chunks. This statistic has been considered for the study because the suggested solution uses multiple key technologies to provide improved security. Multiple keys have no impact on memory use because the keys are only momentarily saved at the transmitter and receiver sides. Furthermore, because each key is only utilized once, an increase in the number of keys has no impact on the fetching delay.&lt;/p&gt;

&lt;h2 id=&quot;installing-entire-project&quot;&gt;Installing Entire Project&lt;/h2&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;git clone https://github.com/th3m4r10/novel-cryptography-project.git&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd novel-cryptography-project&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;python3 -m venv env&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;source env/bin/activate&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;pip3 install -r requirements.txt&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Now you are set to run this project&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Move to Flask_App directory run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;app.py&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Visit your localhost to view the webpage on action&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Register an account on the webpage&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Start the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;server.py&lt;/code&gt; and run the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client.py&lt;/code&gt;&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Input the required data in the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;client.py&lt;/code&gt; console&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Import your private to play the video&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;strong&gt;Keywords&lt;/strong&gt;: Hybrid Cryptography, Multikey Cryptography, Video Communication, Real-time Streaming, Elliptic Curve Cryptography (ECC), AES Encryption, Client-Server Model, Socket Programming, Flask, SQLAlchemy, RSA, Key Generation&lt;/p&gt;

&lt;h3 id=&quot;references&quot;&gt;References&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Project Guided By &lt;a href=&quot;https://www.linkedin.com/in/kumar-anurupam-a3464037/&quot;&gt;Sir, Kumar Anurupam&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Research paper published by &lt;a href=&quot;https://www.linkedin.com/in/rkmundugar/&quot;&gt;Sir. M. Ramakrishna&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Cryptography knowledge by &lt;a href=&quot;https://www.crypto-textbook.com/&quot;&gt;Prof.Christof paar&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Socket Programming tutorial by &lt;a href=&quot;https://realpython.com/python-sockets/&quot;&gt;Real Python&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;Flask tutorial by &lt;a href=&quot;https://www.youtube.com/watch?v=Z1RJmh_OqeA&quot;&gt;freecodecamp&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;additional-links&quot;&gt;Additional Links&lt;/h3&gt;

&lt;p&gt;Source code : &lt;a href=&quot;https://github.com/th3m4r10/novel-cryptography-project&quot;&gt;Github&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Please let me know there was any bug/flaw in the implementation..&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>CryptoverseCTF 2023</title>
   <link href="https://th3m4r10.github.io/2023/05/08/cvctf"/>
   <updated>2023-05-08T00:00:00+00:00</updated>
   <id>https://th3m4r10.github.io/2023/05/08/cvCTF</id>
   <content type="html">&lt;p&gt;Hi Mates!&lt;/p&gt;

&lt;p&gt;I participated in the &lt;a href=&quot;https://cryptoversectf.tk/&quot; target=&quot;_blank&quot;&gt;Cryptoverse CTF 2023&lt;/a&gt;, a 36-hour competition designed for beginner to intermediate players. The event focused on cryptography, reverse engineering, and programming. Our team managed to achieve &lt;a&gt;58th&lt;/a&gt; place in the competition.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/cvctf_profile.png&quot; alt=&quot;Profile&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here are some of the challenges I have solved :&lt;/p&gt;

&lt;h3 id=&quot;cryptowarmup-3&quot;&gt;Crypto/Warmup 3&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/cvctf_crypto_warmup3.png&quot; alt=&quot;warmup3&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;女川弓彳己廾川 马己 马大川 口川彳己广巛 川巛飞马飞己广 己辶 彳巾山彐马己宀川巾口川 彳马辶. 弓艹口马 山川艹巾, 马川艹廾 廾艹彐弓川 屮艹彳己广 辶巾己廾 彳艹广艹巛艹 女己广 马大川 彳己廾彐川马飞马飞己广 屮山 口己弓宀飞广寸 艹弓弓 彳大艹弓弓川广寸川口. 飞辶 山己门 门广巛川巾口马己己巛 马大川 艹屮己宀川 彳大飞广川口川, 大川巾川 飞口 马大川 辶弓艹寸: 彳宀彳马辶{飞广口川彳门巾川彳大广彳飞彐大川巾}. 口门屮廾飞马 马大川 辶弓艹寸 飞广 弓己女川巾 彳艹口川.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Based on the challenge description, it is clear that a new substitution cipher has been designed, and the text is written in Chinese. The challenge also mentions that &lt;em&gt;“online tools won’t work”&lt;/em&gt; in solving the cipher.&lt;/p&gt;

&lt;p&gt;Initially, the approach of translating the Chinese text to English and then using a substitution cipher decoder may seem like a viable solution. However, it turns out that my assumption was wrong🥲.&lt;/p&gt;

&lt;p&gt;Although translating the text did not confirm my assumption, I am confident that I can randomly assign English alphabets to the Chinese characters based on their respective patterns. Initially, I tried to solve it manually with pen &amp;amp; paper for each character, but it was more time-consuming than I anticipated.&lt;/p&gt;

&lt;p&gt;Therefore, I wrote a small Python script to automate the process🪄.&lt;/p&gt;

&lt;p&gt;CODE :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;import re

def replace_chars(s):
    char_map = {
        &quot;女&quot;: &quot;A&quot;,
        &quot;川&quot;: &quot;B&quot;,
        &quot;弓&quot;: &quot;C&quot;,
        &quot;彳&quot;: &quot;D&quot;,
        &quot;己&quot;: &quot;E&quot;,
        &quot;廾&quot;: &quot;F&quot;,
        &quot;马&quot;: &quot;G&quot;,
        &quot;口&quot;: &quot;H&quot;,
        &quot;广&quot;: &quot;I&quot;,
        &quot;巛&quot;: &quot;J&quot;,
        &quot;巾&quot;: &quot;K&quot;,
        &quot;山&quot;: &quot;L&quot;,
        &quot;彐&quot;: &quot;M&quot;,
        &quot;宀&quot;: &quot;N&quot;,
        &quot;艹&quot;: &quot;O&quot;,
        &quot;屮&quot;: &quot;P&quot;,
        &quot;寸&quot;: &quot;Q&quot;,
        &quot;门&quot;: &quot;R&quot;,
        &quot;飞&quot;: &quot;S&quot;,
        &quot;辶&quot;: &quot;T&quot;,
        &quot;丷&quot;: &quot;U&quot;,
        &quot;夕&quot;: &quot;V&quot;,
        &quot;大&quot;: &quot;W&quot;,
        &quot;弋&quot;: &quot;X&quot;,
        &quot;乙&quot;: &quot;Y&quot;,
        &quot;彡&quot;: &quot;Z&quot;
    }

    result = re.sub(&quot;[\u4e00-\u9fff]&quot;, lambda x: char_map[x.group()], s)
    return result

s = &quot;女川弓彳己廾川 马己 马大川 口川彳己广巛 川巛飞马飞己广 己辶 彳巾山彐马己宀川巾口川 彳马辶. 弓艹口马 山川艹巾, 马川艹廾 廾艹彐弓川 屮艹彳己广 辶巾己廾 彳艹广艹巛艹 女己广 马大川 彳己廾彐川马飞马飞己广 屮山 口己弓宀飞广寸 艹弓弓 彳大艹弓弓川广寸川口. 飞辶 山己门 门广巛川巾口马己己巛 马大川 艹屮己宀川 彳大飞广川口川, 大川巾川 飞口 马大川 辶弓艹寸: 彳宀彳马辶{飞广口川彳门巾川彳大广彳飞彐大川巾}. 口门屮廾飞马 马大川 辶弓艹寸 飞广 弓己女川巾 彳艹口川.&quot;

result = replace_chars(s)
print(result)

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here is the actual output:&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;m4r10@ARLinux:~/Desktop/CyberSec/CTF/cvCTF/crypto/warmup3$ python3 temp.py
ABCDEFB GE GWB HBDEIJ BJSGSEI ET DKLMGENBKHB DGT. COHG LBOK, GBOF FOMCB PODEI TKEF DOIOJO AEI GWB DEFMBGSGSEI PL HECNSIQ OCC DWOCCBIQBH. ST LER RIJBKHGEEJ GWB OPENB DWSIBHB, WBKB SH GWB TCOQ: DNDGT{SIHBDRKBDWIDSMWBK}. HRPFSG GWB TCOQ SI CEABK DOHB.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Then, I used a substitution cipher decoder called &lt;a href=&quot;https://quipqiup.com&quot; target=&quot;_blank&quot;&gt;quipqiup&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Output :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;WELCOME TO THE SECOND EDITION OF CRYPTOVERSE CTF. LAST YEAR, TEAM MAPLE BACON FROM CANADA WON THE COMPETITION BY SOLVING ALL CHALLENGES. IF YOU UNDERSTOOD THE ABOVE CHINESE, HERE IS THE FLAG: CVCTF{INSECURECHNCIPHER}. SUBMIT THE FLAG IN LOWER CASE.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : cvctf{insecurechncipher}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;miscreset-options&quot;&gt;Misc/Reset Options&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/cvctf_misc_resetoptions.png&quot; alt=&quot;ResetOptions&quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Robin found this screenshot taken when he was playing around with his gadgets, but he forgot where this was from. Can you help Robin to find out how he got this screen?

Flag format: cvctf{BRAND_NAME_KEYS_PRESSED_IN_ALPHABETICAL_ORDER}

Example: cvctf{APPLE_COMMAND_OPTION_P_R}

Note: We assume numbers are before letters in alphabetical order. Use full name for the brand. As a sanity check, flag has 4 underscores.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;/assets/files/cvCTF/reset.png&quot; download=&quot;&quot;&gt; View Files Here&lt;/a&gt;  👈&lt;/p&gt;

&lt;p&gt;First, I examined the given PNG file, then used Google Lens to search for the brand name, and I found &lt;a href=&quot;https://education.ti.com/html/webhelp/EG_TINspire/EN/content/m_press-to-test/pt_press-to-test_for_ti-84_plus_mode.HTML&quot; target=&quot;_blank_&quot;&gt;TI-84&lt;/a&gt; (Calculator)&lt;br /&gt;that is : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;TEXAS INSTRUMENTS&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After, I got original PNG file with additional information from &lt;a href=&quot;http://www.omnimaga.org/general-discussion/mem-clear-for-singapore/&quot; target=&quot;_blank_&quot;&gt;This&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/cvctf_misc_resetoptions0.png&quot; alt=&quot;ResetOptions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;After observing the above image and reading the challenge &lt;a&gt;note&lt;/a&gt;, I created a flag format&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : cvctf{TEXAS_INSTRUMENTS_8_2_ON}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>DawgCTF 2023</title>
   <link href="https://th3m4r10.github.io/2023/04/24/dawgctf"/>
   <updated>2023-04-24T00:00:00+00:00</updated>
   <id>https://th3m4r10.github.io/2023/04/24/DawgCTF</id>
   <content type="html">&lt;p&gt;Hi Mates!&lt;/p&gt;

&lt;p&gt;I played this CTF as usually along with my team &lt;a href=&quot;https://ctftime.org/team/217079&quot;&gt;Invaders0x1&lt;/a&gt;. During the competition, my team and I worked tirelessly without taking a break from Fri, 21 April 2023, 22:30 IST — Sun, 23 April 2023, 22:30 IST.&lt;br /&gt;
Proud to share our team ranked &lt;a style=&quot;color: cyan;&quot; href=&quot;https://ctftime.org/event/1974&quot; target=&quot;_blank&quot;&gt;#Top6&lt;/a&gt; globally in &lt;a&gt;DawgCTF2023&lt;/a&gt; which was hosted by &lt;a style=&quot;color: cyan;&quot; href=&quot;https://umbccd.umbc.edu/&quot;&gt;UMBCCyberDawgs&lt;/a&gt;.
We faced tough competition from some of the best teams in the world, but we were determined to succeed.
Despite the difficulty of the task, our team persevered and came up with a creative solution.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/dawgctf_scoreboard.jpeg&quot; alt=&quot;scoreboard&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Overall, we are grateful for the experience and proud of our achievement. We will continue to work hard and strive for excellence in future competitions.&lt;br /&gt;
Our team knows that &lt;a&gt;#persistence&lt;/a&gt; is key to success, and we will continue to demonstrate that in everything we do.&lt;/p&gt;

&lt;p&gt;Here are some of the challenges I have solved :&lt;/p&gt;

&lt;h3 id=&quot;breaker-breaker&quot;&gt;Breaker, Breaker&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/breaker_breaker.png&quot; alt=&quot;Breaker, Breaker &quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;I got this radio recording of a local police department using my trusty scanner, can you figure out what all those fancy numbers mean?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/118-1GWC7F0he5EVhF6jnGUmu7CbBaSnD/view&quot; target=&quot;_blank&quot;&gt; View Files Here&lt;/a&gt;  👈&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;(The flag will be in alphabetical format only and you will enclose it in DawgCTF, i.e DawgCTF{FLAGGERT}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After downloading the &lt;strong&gt;40-second&lt;/strong&gt; audio file, I have been listening to this audio for nearly &lt;strong&gt;1 hour&lt;/strong&gt; in an attempt to understand and identify the number digits in the audio.&lt;br /&gt;
However, I have not been successful in identifying the exact number digits. As a result, I decided to use online tools like &lt;strong&gt;Flixier&lt;/strong&gt; to generate a transcript (i.e., convert audio to text), but it gave worse results than what I was able to do myself 🥲.&lt;/p&gt;

&lt;p&gt;Again I was decided to do myself. And the result is &lt;br /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-1: [10-1-8, 10-7, 10-0, 10-17, 10-15, 10-4, 10-0, 10-1-7, 10-18 And 65 ]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-2: [10-18, 10-7, 10-0, 10-17, 10-15, 10-4, 10-0, 10-17, 10-18 And 65]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-3: [18, 7, 0, 17, 15, 4, 0, 17, 18 And 65]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-4: [18, 7, 0, 17, 15, 4, 0, 17, 18, A]&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Here 65 is the hint, i.e., 65 = A in ASCII
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After spending whole day with different ways to decode the sequence,&lt;/p&gt;

&lt;p&gt;Finally figured something good.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;i.e., Add 65 to all numbers
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Step-5: [18+65 7+65 0+65 17+65 15+65 4+65 0+65 17+65 18+65]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Step-6: [ 83 72 65 82 80 69 65 82 83 ]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;To convert Decimal to Ascii :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;decimal_values = [83, 72, 65, 82, 80, 69, 65, 82, 83]
ascii_string = &apos;&apos;.join([chr(decimal) for decimal in decimal_values])
print(ascii_string)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Output : S H A R P E A R S&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : DawgCTF{SHARPEARS}&lt;/code&gt;&lt;/strong&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;oh-deer&quot;&gt;Oh, Deer&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/oh_deer.png&quot; alt=&quot;Oh, Deer &quot; /&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;My friend sent me a bunch of pictures of deer and said there&apos;s a secret code in them or something. Can you figure out what he&apos;s talking about? He mentioned something about going from left to right in order and that there&apos;s only two types of a thing in all the pictures. He also said that it&apos;s not zeroes and ones, but wouldn&apos;t tell me what other two things it would be if not zero and one.

The flag will be in the format DawgCTF{THEFLAG}, alphabetical only, all capitals for the contents inside DawgCTF{}.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1e2Sou85uToT-31kg3HWaVV11yVmcVD6N/view&quot; target=&quot;_blank&quot;&gt; View Files Here&lt;/a&gt;  👈&lt;/p&gt;

&lt;p&gt;After extracting the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;ohdeer.zip&lt;/code&gt; file, we obtained 0-24 deer images, with each image containing 2 deers.&lt;br /&gt;
By observing the images, we can differentiate between the sexes of the deer.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;From left to right:
(F)  (M)
(M)  (F)
(M)  (M)
(F)  (F)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;We have obtained the final sequence form all images :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FM MF MF MM MF MF FF MF FM FF FM FF FF MM FM FF FM MF FM FF FF MF FM FF FM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;This is the &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Baconian Cipher&lt;/code&gt;&lt;/strong&gt;,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;FMMFM FMMMF MFFFM FFMFF FMFFF FMMFM FFFMM FFMFF FFMFF MFFFM
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Using &lt;a href=&quot;https://www.dcode.fr/bacon-cipher&quot;&gt;dCode&lt;/a&gt; we can decrypt &lt;strong&gt;Cipher text&lt;/strong&gt; and obtain &lt;strong&gt;Plain text&lt;/strong&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;N O R E I N D E E R
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;And here is the flag,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : DawgCTF{NOREINDEER}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;yo-dawg&quot;&gt;Yo Dawg&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Yo Dawg, we heard you like flags, so we put a flag in your memes.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;a href=&quot;https://drive.google.com/file/d/1PlajwJ5IzRsFhk9BV0EaMRrT6yAwA-FG/view&quot; target=&quot;_blank&quot;&gt;View Files Here&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Using command : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool yo_dawg.jpg&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;m4r10@ARLinux:~/Desktop/CyberSec/CTF/DawgCTF/forensic$ exiftool yo_dawg.jpg 
ExifTool Version Number         : 12.40
File Name                       : yo_dawg.jpg
Directory                       : .
File Size                       : 41 KiB
File Modification Date/Time     : 2023:04:22 10:49:38+05:30
File Access Date/Time           : 2023:04:22 10:52:46+05:30
File Inode Change Date/Time     : 2023:04:22 10:50:01+05:30
File Permissions                : -rw-rw-r--
File Type                       : JPEG
File Type Extension             : jpg
MIME Type                       : image/jpeg
JFIF Version                    : 1.01
Resolution Unit                 : None
X Resolution                    : 72
Y Resolution                    : 72
Image Width                     : 622
Image Height                    : 401
Encoding Process                : Baseline DCT, Huffman coding
Bits Per Sample                 : 8
Color Components                : 3
Y Cb Cr Sub Sampling            : YCbCr4:2:0 (2 2)
Image Size                      : 622x401
Megapixels                      : 0.249
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By using &lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;stegsolver&lt;/code&gt;&lt;/strong&gt;&lt;br /&gt;
We can,&lt;br /&gt;
Analyze color channels to identify hidden data,&lt;br /&gt;
Extract and analyzing metadata embedded in the image file,&lt;br /&gt;
Apply various filters to the image to highlight hidden information,&lt;br /&gt;
Check for unusual patterns or anomalies in the image.&lt;/p&gt;

&lt;p&gt;Finally, After changing the &lt;strong&gt;Frame&lt;/strong&gt; obtained the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/yo_dawg.png&quot; alt=&quot;yo_dawg&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the flag is,&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : DawgCTF{h342d_y0u_11k3_f1495_d4w9}&lt;/code&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>JerseyCTF III</title>
   <link href="https://th3m4r10.github.io/2023/04/18/jerseyctf"/>
   <updated>2023-04-18T00:00:00+00:00</updated>
   <id>https://th3m4r10.github.io/2023/04/18/JerseyCTF</id>
   <content type="html">&lt;p&gt;Hello mates!&lt;/p&gt;

&lt;p&gt;I played &lt;a href=&quot;https://ctf.jerseyctf.com/&quot; target=&quot;_blank&quot;&gt;JerseyCTF III&lt;/a&gt; which was hosted by the &lt;a style=&quot;color:cyan;&quot;&gt;NJIT ACM&lt;/a&gt; along with my team &lt;a&gt;Invaders0x1&lt;/a&gt;.Our team achieved a commendable 125th place in the CTF competition, and we are determined to strive for even better results in future competitions.&lt;/p&gt;

&lt;p&gt;Here are some of the challenges I have solved :&lt;/p&gt;

&lt;h3 id=&quot;back-to-the-office&quot;&gt;back-to-the-office&lt;/h3&gt;

&lt;p&gt;Challenge details :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;There&apos;s a flag somewhere in this Microsoft Word document.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hint :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Newer Microsoft Office files are in OOXML format. Learn more about this file format to find the flag.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Here is the attached file &lt;a href=&quot;/assets/files/jerseyCTF/back-to-the-office.docx&quot; download=&quot;&quot;&gt;back-to-the-office.docx&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Download the given file and extract with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzip back-to-the-office.docx&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;And to check directories use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;tree *&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;m4r10@ARLinux:~/Desktop/CyberSec/CTF/jerseyCTF/misc$ tree *
back-to-the-office.docx  [error opening dir]
[Content_Types].xml  [error opening dir]
docProps
├── app.xml
└── core.xml
_rels
word
├── document.xml
├── fontTable.xml
├── _rels
│   └── document.xml.rels
├── settings.xml
├── styles.xml
├── theme
│   └── theme1.xml
└── webSettings.xml
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;After that run the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat word/settings.xml&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Yayy, you got the flag at the end of the xml code.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : jctf{601n6_1n70_7h3_0ff1c3}&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;put-the-cookie-down&quot;&gt;put-the-cookie-down&lt;/h3&gt;

&lt;p&gt;Challenge details :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The Terminator has sent you a frantic message from 1996, maybe it&apos;s something important! Wait... do I smell cookies?
Flag format: jctf{string}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Here are the steps I followed:&lt;/p&gt;

&lt;p&gt;-Open your browser DevTools&lt;br /&gt;
-As the hint suggests, we will be exploring DevTools a bit deeper&lt;br /&gt;
-Navigate to the Application tab&lt;br /&gt;
-On the left side of the Application tab, go to &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Storage &amp;gt; Cookies&lt;/code&gt;&lt;br /&gt;
-Click on the website’s URL to see the cookie data.&lt;/p&gt;

&lt;p&gt;Or otherwise you can simply open cookies to check the flag,&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/put-the-cookie-down.png&quot; alt=&quot;Payload&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag: jctf{I_WILL_BE_BACK_FOR_MORE_C00KI3S!}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;back-to-socials&quot;&gt;back-to-socials&lt;/h3&gt;

&lt;p&gt;Challenge details :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;The NICC club that co-hosts this event jumped into the NCAE Cyber Games this past February and placed well for the first time competing as a club! The club wanted to let everyone at the school know of their successes and were very social! Can you dig deep and find out where this flag could be planted?
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Hint :&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;There is usually some sort of website that people can share their achievements to a professional crowd...
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;From this hint,&lt;/p&gt;

&lt;p&gt;I have decided to search for the &lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;NICC Competes in their first NCAE Cyber Games&lt;/code&gt;&lt;/em&gt; post on LinkedIn.&lt;br /&gt;
And here is the result with post link,&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;https://www.linkedin.com/pulse/nicc-competes-first-ncae-cyber-games-njiticc/
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/back-to-socials.png&quot; alt=&quot;Payload&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : jctf{c0mp3titi0n_spark5_excellency}&lt;/code&gt;&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 
 <entry>
   <title>PicoCTF 2023</title>
   <link href="https://th3m4r10.github.io/2023/04/04/picoctf2023"/>
   <updated>2023-04-04T00:00:00+00:00</updated>
   <id>https://th3m4r10.github.io/2023/04/04/picoCTF2023</id>
   <content type="html">&lt;p&gt;Hi Mates!&lt;/p&gt;

&lt;p&gt;I participated in the &lt;a&gt;picoCTF 2023&lt;/a&gt; organized by &lt;a style=&quot;color:cyan;&quot; href=&quot;https://www.cmu.edu/&quot;&gt;Carnegie Mellon University&lt;/a&gt;, Which was run from Mar 14 2023 to Mar 28 2023. 
PicoCTF is a free online cybersecurity competition aimed at middle and high school students, but it’s also suitable for beginners of all ages. It was a great learning experience and I really learnt a lot.&lt;/p&gt;

&lt;p&gt;Let me explain the challenges that I have solved in picoCTF 2023.&lt;/p&gt;

&lt;h2 id=&quot;general-skills-&quot;&gt;&lt;a&gt;General Skills :&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;I solved all the challenges that were given !&lt;/p&gt;

&lt;h3 id=&quot;chrono&quot;&gt;Chrono&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/chrono.png&quot; alt=&quot;chrono&quot; width=&quot;450&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Firstly, We have to launch the instance and connect to the server with given credentials.&lt;/p&gt;

&lt;p&gt;Based on the question prompt it had to be &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cron jobs&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;After various attempts to access crontab itself, I tried looking inside &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;/etc/crontab&lt;/code&gt; with the &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat&lt;/code&gt; command.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{Sch3DUL7NG_T45K3_L1NUX_1b4d8744}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;money-ware&quot;&gt;Money-ware&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/money-ware.png&quot; alt=&quot;money-ware&quot; /&gt;&lt;/p&gt;

&lt;p&gt;I don’t know what it is but i’m googling &lt;a&gt;1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX&lt;/a&gt;, I got the link which had reports with descriptions and one of those descriptions points us to:&lt;/p&gt;

&lt;p&gt;More information is here : &lt;a href=&quot;https://blog.avira.com/petya-strikes-back/&quot; target=&quot;_blank&quot;&gt; https://blog.avira.com/petya-strikes-back/ &lt;/a&gt;&lt;/p&gt;

&lt;p&gt;This is an article about a vulnerability called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Petya&lt;/code&gt; so our answer should be:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{petya}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;permissions&quot;&gt;Permissions&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/permissions.png&quot; alt=&quot;permissions&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We have to connect the server and &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cd / &lt;/code&gt;, I saw a directory named challenge, inside it there was a file which when cating it game the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/permissions1.png&quot; alt=&quot;solution&quot; /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{uS1ng_v1m_3dit0r_021d10ab}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;repetitions&quot;&gt;Repetitions&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/repetitions.png&quot; alt=&quot;repetitions&quot; width=&quot;440&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The file itself looks like standard base64 encoding and decoding it will give you the flag use &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cyberchef&lt;/code&gt;.
I had to decode with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;base64&lt;/code&gt; six times to get the flag 😂&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{base64_n3st3d_dic0d!n8_d0wnl04d3d_dfe803c6}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;useless&quot;&gt;Useless&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/useless.png&quot; alt=&quot;useless&quot; /&gt;&lt;/p&gt;

&lt;p&gt;In the home directory there is a file named useless.&lt;/p&gt;

&lt;p&gt;After running the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;man useless&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We got the flag,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{us3l3ss_ch4ll3ng3_3xpl0it3d_3555}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;special&quot;&gt;Special&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/specialer.png&quot; alt=&quot;Special&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This challenge was hard and to come with this bash script.&lt;/p&gt;

&lt;p&gt;My solution was as follows:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat flag.txt | cat /home/ctf-player/*/*.txt&lt;/code&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{5p311ch3ck_15_7h3_w0r57_a60bdf40}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;*** &lt;br /&gt;&lt;/p&gt;

&lt;h3 id=&quot;specialer&quot;&gt;Specialer&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/special.png&quot; alt=&quot;Specialer&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Connecting into the shell we’re not allowed a lot of things like &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat, ls....&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;After a lot of tries,&lt;/p&gt;

&lt;p&gt;My solution was as follows:
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;echo &quot;$( &amp;lt; /home/ctf-player/ala/kazam.txt)&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Now we got the flag :&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{5p311ch3ck_15_7h3_w0r57_a60bdf40}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;cryptographhy-&quot;&gt;&lt;a&gt;Cryptographhy :&lt;/a&gt;&lt;/h2&gt;

&lt;p&gt;Although I couldn’t solve all the challenges, I managed to solve some of the challenges that I knew how to do!&lt;/p&gt;

&lt;h3 id=&quot;hidetosee&quot;&gt;HideToSee&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/hidetosee.png&quot; alt=&quot;HideToSee&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets download the file.&lt;/p&gt;

&lt;p&gt;This is a jpeg file. We’ll be using a tool called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steghide&lt;/code&gt; to extract information from this jpeg file, Use : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;steghide -sf --extract atbash.jpg&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Here we got a text file called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;encrypted.txt&lt;/code&gt;, Use : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat encrypted.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;krxlXGU{zgyzhs_xizxp_8z0uvwwx}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It looks like flag but it’s not.&lt;/p&gt;

&lt;p&gt;Now just need to decode atbash and you’re done&lt;/p&gt;

&lt;p&gt;We got the flag,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{atbash_crack_6c4bcb08}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;readmycert&quot;&gt;ReadMyCert&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/readmycert.png&quot; alt=&quot;ReadMyCert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets download the file.&lt;/p&gt;

&lt;p&gt;From the hint we were try to read the file. Bang !!
&lt;img src=&quot;/assets/img/post_img/readmycert1.png&quot; alt=&quot;ReadMyCert&quot; /&gt;&lt;/p&gt;

&lt;p&gt;And the flag is,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{read_mycert_41d1c74c}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;rotation&quot;&gt;Rotation&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/rotation.png&quot; alt=&quot;rotation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets download the file and open with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;cat encrypted.txt&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;xqkwKBN{z0bib1wv_l3kzgxb3l_555957n3}&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We got another encrypted text having the flag format. I got to know that this is a &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;caesar cipher&lt;/code&gt;, so I used to decrypt with this &lt;a href=&quot;https://www.boxentriq.com/code-breaking/caesar-cipher&quot; target=&quot;_blank&quot;&gt;online tool&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It is a simple Rotation cipher, brute-forcing works fine.&lt;/p&gt;

&lt;p&gt;Here is the flag,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{r0tat1on_d3crypt3d_949af1a1}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;forensics-&quot;&gt;&lt;a&gt;Forensics :&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;hideme&quot;&gt;Hideme&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/hideme.png&quot; alt=&quot;rotation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets download the file and check file type with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ file flag.png        
flag.png: PNG image data, 512 x 504, 8-bit/color RGBA, non-interlaced
                                                                                                                                                                        
┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ exiftool flag.png        
ExifTool Version Number         : 12.57
File Name                       : flag.png
Directory                       : .
File Size                       : 43 kB
File Modification Date/Time     : 2023:03:22 19:38:37+01:00
File Access Date/Time           : 2023:03:22 19:38:53+01:00
File Inode Change Date/Time     : 2023:03:22 19:38:48+01:00
File Permissions                : -rw-r--r--
File Type                       : PNG
File Type Extension             : png
MIME Type                       : image/png
Image Width                     : 512
Image Height                    : 504
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Warning                         : [minor] Trailer data after PNG IEND chunk
Image Size                      : 512x504
Megapixels                      : 0.258

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is a PNG, So we can observe the header using a tool called &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;zsteg&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌─[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└──╼ $zsteg flag.png 
[?] 3191 bytes of extra data after image end (IEND), offset = 0x9b3b
extradata:0         .. file: Zip archive data, at least v1.0 to extract
    00000000: 50 4b 03 04 0a 00 00 00  00 00 3a 10 70 56 00 00  |PK........:.pV..|
    00000010: 00 00 00 00 00 00 00 00  00 00 07 00 1c 00 73 65  |..............se|
    00000020: 63 72 65 74 2f 55 54 09  00 03 8f 78 12 64 8f 78  |cret/UT....x.d.x|
    00000030: 12 64 75 78 0b 00 01 04  00 00 00 00 04 00 00 00  |.dux............|
    00000040: 00 50 4b 03 04 14 00 00  00 08 00 3a 10 70 56 67  |.PK........:.pVg|
    00000050: 45 23 b5 35 0b 00 00 d0  0b 00 00 0f 00 1c 00 73  |E#.5...........s|
    00000060: 65 63 72 65 74 2f 66 6c  61 67 2e 70 6e 67 55 54  |ecret/flag.pngUT|
    00000070: 09 00 03 8f 78 12 64 8f  78 12 64 75 78 0b 00 01  |....x.d.x.dux...|
    00000080: 04 00 00 00 00 04 00 00  00 00 cd 56 59 3c 14 fc  |...........VY&amp;lt;..|
    00000090: 1a fe 87 b2 26 1f 22 5b  a3 65 1a 59 c6 30 76 33  |....&amp;amp;.&quot;[.e.Y.0v3|
    000000a0: c4 47 92 35 44 f6 35 bb  6c 43 1a 65 64 49 85 10  |.G.5D.5.lC.edI..|
    000000b0: 45 d9 3e 6a ec 63 9d 21  64 df 69 08 23 fb 12 45  |E.&amp;gt;j.c.!d.i.#..E|
    000000c0: f6 65 2c 8d 8a 33 e7 77  ae ce c5 b9 3f ef c5 fb  |.e,..3.w....?...|
    000000d0: bc db 73 f7 fe 9e df f3  cc d8 50 e7 34 9b 20 1b  |..s.......P.4. .|
    000000e0: 00 e0 b4 ee 0d 2d 13 00  18 ee d0 6b 59 2e 7a 02  |.....-.....kY.z.|
    000000f0: 7b 3e 57 cc e9 c0 e4 a6  61 a0 01 40 45 02 fb 6f  |{&amp;gt;W.....a..@E..o|

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Interesting 😎. So, I went ahead to unzip command : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;unzip flag.png&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ unzip flag.png                          
Archive:  flag.png
warning [flag.png]:  39739 extra bytes at beginning or within zipfile
  (attempting to process anyway)
   creating: secret/
  inflating: secret/flag.png         
                                                                                                                                                                        
┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ ls
flag.png  secret
                                                                                                                                                                        
┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ cd secret   
                                                                                                                                                                        
┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files/secret]
└─$ ls
flag.png

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Now, Just you have to open &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag.png&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Yeah, we got the flag :&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{Hiddinng_An_imag3_within_@n_ima9e_82101824}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;pcappoisoning&quot;&gt;PcapPoisoning&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/pcappoisoning.png&quot; alt=&quot;rotation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets download the file&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ ls
flag.png  secret  trace.pcap
                                                                                                                                                                        
┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ file trace.pcap 
trace.pcap: pcap capture file, microsecond ts (little-endian) - version 2.4 (Raw IPv4, capture length 65535)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;This is a pcap file. So, We have to check through &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wireshark&lt;/code&gt;. But if possible we can find the flag using command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;grep&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;just checking with command : &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings trace.pcap | grep -i &quot;pico&quot;&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ strings trace.pcap | grep -i &quot;pico&quot;
picoCTF{P64P_4N4L7S1S_SU55355FUL_31010c46}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Yayyy😉!, We got the flag :&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{P64P_4N4L7S1S_SU55355FUL_31010c46}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;reverse-engineering-&quot;&gt;&lt;a&gt;Reverse Engineering :&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;reverse&quot;&gt;Reverse&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/reverse.png&quot; alt=&quot;rotation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets download the file and check file type with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt;&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ file ret
ret: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7f12d7198b75bd4d9f159e7a45141d4f13836e51, for GNU/Linux 3.2.0, not stripped
                                                                                                                                                                                                
┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ exiftool ret           
ExifTool Version Number         : 12.57
File Name                       : ret
Directory                       : .
File Size                       : 17 kB
File Modification Date/Time     : 2023:03:30 12:41:59+01:00
File Access Date/Time           : 2023:03:30 12:42:27+01:00
File Inode Change Date/Time     : 2023:03:30 12:42:01+01:00
File Permissions                : -rw-r--r--
File Type                       : ELF shared library
File Type Extension             : so
MIME Type                       : application/octet-stream
CPU Architecture                : 64 bit
CPU Byte Order                  : Little endian
Object File Type                : Shared object file
CPU Type                        : AMD x86-64
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Cool, It is an executable file, Once again we can check with the command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings ret | grep -i &quot;pico&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;We got the flag,&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag :  picoCTF{3lf_r3v3r5ing_succe55ful_fa9cb3b1}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;safe-opener-2&quot;&gt;Safe Opener 2&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/safeopener2.png&quot; alt=&quot;rotation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Lets download the file and check file type with &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;exiftool&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ file SafeOpener.class 
SafeOpener.class: compiled Java class data, version 52.0 (Java 1.8)
                                                                                                                                                                                                
┌──[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└─$ exiftool SafeOpener.class 
ExifTool Version Number         : 12.57
File Name                       : SafeOpener.class
Directory                       : .
File Size                       : 2.0 kB
File Modification Date/Time     : 2023:03:30 12:46:01+01:00
File Access Date/Time           : 2023:03:30 12:46:24+01:00
File Inode Change Date/Time     : 2023:03:30 12:46:16+01:00
File Permissions                : -rw-r--r--
File Type                       : Java bytecode
File Type Extension             : class
MIME Type                       : application/java-byte-code
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;Just like before challenge, We’ll be checking with the strings command :
&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;strings SafeOpener.class | grep -i &quot;pico&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Coooooool, we got the flag.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{SAf3_0p3n3rr_y0u_solv3d_it_198203f7}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h2 id=&quot;binary-exploitation-&quot;&gt;&lt;a&gt;Binary Exploitation :&lt;/a&gt;&lt;/h2&gt;

&lt;h3 id=&quot;two-sum&quot;&gt;Two-Sum&lt;/h3&gt;

&lt;p&gt;Here is the given challenge :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/two-sum.png&quot; alt=&quot;rotation&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Trying it locally works and the reason is beacause the maximum value of a signed integer is &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;2147483647&lt;/code&gt; so giving it &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;1&lt;/code&gt; goes above the maximum value.&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌─[m4r10@parrot]─[/media/sf_CyberSec/task_files]
└──╼ $nc saturn.picoctf.net 52197.
n1 &amp;gt; n1 + n2 OR n2 &amp;gt; n1 + n2 
What two positive numbers can make this possible: 
2147483647
1
You entered 2147483647 and 1
You have an integer overflow
YOUR FLAG IS: picoCTF{Tw0_Sum_Integer_Bu773R_0v3rfl0w_fe14e9e9}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;Yahooo !, We got the flag😎&lt;/p&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : picoCTF{Tw0_Sum_Integer_Bu773R_0v3rfl0w_bc0adfd1}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

</content>
 </entry>
 
 <entry>
   <title>VishwaCTF</title>
   <link href="https://th3m4r10.github.io/2023/04/02/vishwactf"/>
   <updated>2023-04-02T00:00:00+00:00</updated>
   <id>https://th3m4r10.github.io/2023/04/02/VishwaCTF</id>
   <content type="html">&lt;p&gt;Hi, Hello!&lt;/p&gt;

&lt;p&gt;I played &lt;a&gt;VishwaCTF 2023&lt;/a&gt; which was organised by &lt;a href=&quot;https://ctftime.org/team/144677&quot; style=&quot;color:cyan;&quot;&gt;CyberCellVIIT&lt;/a&gt; along with team &lt;a&gt;Invaders0x1&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here is one of the challenge I have solved from &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;#WEB&lt;/code&gt; category&lt;/p&gt;

&lt;h3 id=&quot;payload&quot;&gt;Payload&lt;/h3&gt;

&lt;p&gt;Here is the challenge deployment :&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/payload.png&quot; alt=&quot;Payload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;We were given a button on the webserver which when pressed gave me the info about the system details.&lt;/p&gt;

&lt;p&gt;So again dirsearch found robots.txt on the website which when accessed gave me the source code having if else condition mentioning cmd and btn.&lt;/p&gt;

&lt;p&gt;So as we press the system details button we see that in the url /?btn= appears so simply i changed btn to cmd and to check for if the commands work i tried &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?cmd=ls&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/payload1.png&quot; alt=&quot;Payload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;It gave me the files inside the directory index.html, index.php and one more file forgot the name. So i simply used command &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?cmd=cat+index.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;To notice I wasnt getting the flag anywhere instead the site was getting rendered so I decided to use an alt for cat command and I did the changes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;?cmd=tac index.php&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;and there we go, I found the whole source code with the flag.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/assets/img/post_img/payload2.png&quot; alt=&quot;Payload&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here is the hidden deatails of the deploymemnt which includes &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;flag&lt;/code&gt; !&lt;/p&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;?&amp;gt; } } system(&quot;uname -a&quot;); echo &quot;System Details: &quot;; if(isset($_GET[&apos;btn&apos;])){ else { } system($_GET[&apos;cmd&apos;]); if(isset($_GET[&apos;cmd&apos;])){ putenv(&quot;FLAG=VishwaCTF{y0u_f-o-u-n-d_M3}&quot;);
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;FLAG : VishwaCTF{y0u_f-o-u-n-d_M3}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
 </entry>
 
 <entry>
   <title>WolvCTF 2023</title>
   <link href="https://th3m4r10.github.io/2023/03/20/wolvctf"/>
   <updated>2023-03-20T00:00:00+00:00</updated>
   <id>https://th3m4r10.github.io/2023/03/20/WolvCTF</id>
   <content type="html">&lt;p&gt;Hi friends!&lt;/p&gt;

&lt;p&gt;It’s my first CTF. Feeling excited and a little bit worrying too !&lt;/p&gt;

&lt;p&gt;I played &lt;a href=&quot;https://wolvctf.io/&quot;&gt;WolvCTF&lt;/a&gt; 2023 which was organized by &lt;a style=&quot;color: cyan;&quot; href=&quot;https://wolvsec.org/&quot;&gt;WolvSec&lt;/a&gt; along with my team &lt;a href=&quot;https://ctftime.org/team/217079&quot; target=&quot;_blank&quot;&gt;Invaders0x1&lt;/a&gt;. And it was held from 17 March 2023, 20:00 UTC — Sun, 19 March 2023, 20:00&lt;/p&gt;

&lt;p&gt;Let me explain the challenges I have solved in WolvCTF 2023.&lt;/p&gt;

&lt;h3 id=&quot;charlottes-web&quot;&gt;Charlotte’s Web&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──[m4r10@parrot]─[/media/sf_CyberSec/CTF/WolvCTF]
└─$ curl https://charlotte-tlejfksioa-ul.a.run.app/                                           
&amp;lt;!DOCTYPE html&amp;gt;
&amp;lt;html&amp;gt;
&amp;lt;head&amp;gt;
&amp;lt;title&amp;gt;index&amp;lt;/title&amp;gt;
&amp;lt;script&amp;gt;
  function start() {
    alert(&quot;where&apos;s the flag? i swear it was around here somewhere&quot;);
  }
&amp;lt;/script&amp;gt;
&amp;lt;/head&amp;gt;
&amp;lt;body&amp;gt;
&amp;lt;button onclick=&apos;start()&apos;&amp;gt;click me for the flag&amp;lt;/button&amp;gt;
&amp;lt;!-- /src --&amp;gt;
&amp;lt;/body&amp;gt;

&amp;lt;/html&amp;gt;

                                                                                                                                                                             
┌──[m4r10@parrot]─[/media/sf_CyberSec/CTF/WolvCTF]
└─$ curl https://charlotte-tlejfksioa-ul.a.run.app/src

import flask

app = flask.Flask(__name__)

@app.route(&apos;/&apos;, methods=[&apos;GET&apos;])
def index():
  return flask.send_file(&apos;index.html&apos;)

@app.route(&apos;/src&apos;, methods=[&apos;GET&apos;])
def source():
  return flask.send_file(&apos;app.py&apos;)

@app.route(&apos;/super-secret-route-nobody-will-guess&apos;, methods=[&apos;PUT&apos;])
def flag():
  return open(&apos;flag&apos;).read()
                                                                                                                                                                                      
┌──[m4r10@parrot]─[/media/sf_CyberSec/CTF/WolvCTF]
└─$ curl https://charlotte-tlejfksioa-ul.a.run.app//super-secret-route-nobody-will-guess -X PUT
wctf{y0u_h4v3_b33n_my_fr13nd___th4t_1n_1t53lf_1s_4_tr3m3nd0u5_th1ng}  
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;&lt;br /&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : wctf{y0u_h4v3_b33n_my_fr13nd___th4t_1n_1t53lf_1s_4_tr3m3nd0u5_th1ng}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;baby-re&quot;&gt;Baby re&lt;/h3&gt;

&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strings baby-re | grep wctf
wctf{Oh10_Stat3_1s_Smelly!}
wctf{Must_be_fr0m_OSU}
wctf{A_t0tally_fake_flag}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;By guessing I took &lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;wctf{Oh10_Stat3_1s_Smelly!}&lt;/code&gt; and It was the right flag&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : wctf{Oh10_Stat3_1s_Smelly!}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;hr /&gt;

&lt;h3 id=&quot;we-will-rock-you&quot;&gt;We will rock you&lt;/h3&gt;

&lt;p&gt;The challenge gave us a protected zip file. Then, we crack it with john and the rockyou wordlist :&lt;/p&gt;
&lt;div class=&quot;language-plaintext highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;┌──[m4r10@parrot]─[/media/sf_CyberSec/CTF/WolvCTF]
└─$ zip2john we_will_rock_you.zip &amp;gt; zip.hashes                 
Created directory: /home/kali/.john
ver 1.0 we_will_rock_you.zip/we_will_rock_you/ is not encrypted, or stored with non-handled compression type
ver 1.0 efh 5455 efh 7875 we_will_rock_you.zip/we_will_rock_you/flag.txt PKZIP Encr: 2b chk, TS_chk, cmplen=33, decmplen=21, crc=7D20D45F ts=B816 cs=b816 type=0
                                                                                                                                                                                      
┌──[m4r10@parrot]─[/media/sf_CyberSec/CTF/WolvCTF]
└─$ john --wordlist=/usr/share/wordlists/rockyou.txt zip.hashes
Using default input encoding: UTF-8
Loaded 1 password hash (PKZIP [32/64])
Will run 2 OpenMP threads
Press &apos;q&apos; or Ctrl-C to abort, almost any other key for status
michigan4ever    (we_will_rock_you.zip/we_will_rock_you/flag.txt)     
1g 0:00:00:00 DONE (2023-03-20 17:35) 1.176g/s 6548Kp/s 6548Kc/s 6548KC/s mickovgys..michellsmg
Use the &quot;--show&quot; option to display all of the cracked passwords reliably
Session completed. 

┌──[m4r10@parrot]─[/media/sf_CyberSec/CTF/WolvCTF]
└─$ cat we_will_rock_you/flag.txt 
wctf{m1cH1g4n_4_3v3R} 
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;blockquote&gt;
  &lt;p&gt;&lt;code class=&quot;language-plaintext highlighter-rouge&quot;&gt;Flag : wctf{m1cH1g4n_4_3v3R}&lt;/code&gt;&lt;/p&gt;
&lt;/blockquote&gt;

</content>
 </entry>
 

</feed>
