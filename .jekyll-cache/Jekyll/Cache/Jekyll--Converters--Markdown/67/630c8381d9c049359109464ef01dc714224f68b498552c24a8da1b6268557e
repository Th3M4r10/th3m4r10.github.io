I"¡%<p>Hello all!<br />
I have recently played <a href="https://ctftime.org/event/1923"> SekaiCTF </a>. <br />
Which was happened from Fri, 25 Aug. 2023, 21:30 IST to Sun, 27 Aug. 2023, 21:30 IST.<br /></p>

<p>Here is the challenge from the category of <a style="color:cyan">Professional Programming &amp; Coding (PPC)</a></p>

<h3 id="wiki-game">Wiki Game</h3>

<pre>
Welcome to Project SEKAI Online Judge!

Author: sahuang
</pre>
<p><a style="color:#FF7779">‚ùñ Note :</a>
Time limit is 5 seconds. There is rate limiting and you can only submit once every 30 seconds. For simplicity, sample input <code class="language-plaintext highlighter-rouge">1.in</code> is given in this challenge.</p>

<p><a style="color:pink">Server:</a> ¬†
<a href="http://algo-server.chals.sekai.team" target="_blank">http://algo-server.chals.sekai.team</a> üìã</p>

<p><a style="color:pink">Files:</a> <br />
<a href="/assets/files/sekaiCTF/Wiki_Game.pdf" download=""> Wiki_Game.pdf</a> <br /> <a href="/assets/files/sekaiCTF/1.in" download=""> 1.in</a></p>

<h4 id="problem-statement">Problem Statement</h4>

<p><img src="/assets/img/post_img/sekai_wiki_game.png" alt="six degrees of wikipedia " /></p>

<p>The <code class="language-plaintext highlighter-rouge">Wiki Game</code> is a hypertextual game designed to work speciÔ¨Åcally with Wikipedia. Player starts on some randomly selected article, and must navigate to another pre-selected target article solely by clicking links within each article. The goal is to arriveat the target article in the fewest clicks. According to <code class="language-plaintext highlighter-rouge">Six degrees of Wikipedia</code>, you can almost always complete the game in 6 clicks.</p>

<p>The Wikipedia database can be modelled as an unweighted, directed graph where each article corresponds to a vertex. It is important to note that the graph can contain cycles. Your goal is to efÔ¨Åciently determine whether it is possible to navigate from the source article to the target article within a maximum path length of 6.</p>

<h4 id="input">Input</h4>

<p>The Ô¨Årst line of input contains an integer <code class="language-plaintext highlighter-rouge">T (1 ‚â§ T ‚â§ 20)</code>, the number of test cases. In each test case, the Ô¨Årst line contains two space-separated integers <code class="language-plaintext highlighter-rouge">n (2 ‚â§ n ‚â§ 1,000)</code> and <br /><code class="language-plaintext highlighter-rouge">m (1 ‚â§ m ‚â§ 4,000)</code>,the number of vertices and edges respectively. The next m lines describe the graph. The ith line contains two space-separated integers <code class="language-plaintext highlighter-rouge">ui, vi (0 ‚â§ ui ‚â† vi&lt; n)</code>, meaning there exists a path from <strong><em>ui</em></strong> to <strong><em>vi</em></strong> . The last line contains two space-separated integers <code class="language-plaintext highlighter-rouge">src, dst (0 ‚â§ src ‚â† dst &lt; n)</code>, the source and target vertices.</p>

<h3 id="output">Output</h3>
<p>Output should have T lines. Each line prints YES if there exists a path from <strong><em><code class="language-plaintext highlighter-rouge">src</code></em></strong> to <strong><em><code class="language-plaintext highlighter-rouge">dst</code></em></strong> within a path length of 6, or NO otherwise. Remember to print them in upper-case.</p>

<h3 id="explanation">Explanation</h3>
<p>In the Ô¨Årst test case, there exists a path <code class="language-plaintext highlighter-rouge">0 ‚Üí 1 ‚Üí 2 ‚Üí 3 ‚Üí 4 ‚Üí 5 ‚Üí 6</code> of length 6, so the answer is <code class="language-plaintext highlighter-rouge">YES</code>.
In the second test case, there is no path from 0 to 9 so the answer is NO. There is a path of length 3 from 9 to 0, but the graph is directed so it does not count.</p>

<p><code class="language-plaintext highlighter-rouge">CODE:</code></p>

<div class="language-python highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="k">def</span> <span class="nf">is_possible_to_reach</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">):</span>
    <span class="n">visited</span> <span class="o">=</span> <span class="p">[</span><span class="bp">False</span><span class="p">]</span> <span class="o">*</span> <span class="nb">len</span><span class="p">(</span><span class="n">graph</span><span class="p">)</span>
    <span class="n">queue</span> <span class="o">=</span> <span class="p">[(</span><span class="n">src</span><span class="p">,</span> <span class="mi">0</span><span class="p">)]</span>

    <span class="k">while</span> <span class="n">queue</span><span class="p">:</span>
        <span class="n">node</span><span class="p">,</span> <span class="n">depth</span> <span class="o">=</span> <span class="n">queue</span><span class="p">.</span><span class="n">pop</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span>
        <span class="k">if</span> <span class="n">node</span> <span class="o">==</span> <span class="n">dst</span><span class="p">:</span>
            <span class="k">return</span> <span class="bp">True</span>

        <span class="k">if</span> <span class="n">depth</span> <span class="o">&gt;=</span> <span class="mi">6</span><span class="p">:</span>
            <span class="k">continue</span>

        <span class="n">visited</span><span class="p">[</span><span class="n">node</span><span class="p">]</span> <span class="o">=</span> <span class="bp">True</span>

        <span class="k">for</span> <span class="n">neighbor</span> <span class="ow">in</span> <span class="n">graph</span><span class="p">[</span><span class="n">node</span><span class="p">]:</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">visited</span><span class="p">[</span><span class="n">neighbor</span><span class="p">]:</span>
                <span class="n">queue</span><span class="p">.</span><span class="n">append</span><span class="p">((</span><span class="n">neighbor</span><span class="p">,</span> <span class="n">depth</span> <span class="o">+</span> <span class="mi">1</span><span class="p">))</span>

    <span class="k">return</span> <span class="bp">False</span>

<span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
    <span class="n">T</span> <span class="o">=</span> <span class="nb">int</span><span class="p">(</span><span class="nb">input</span><span class="p">())</span>
    <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">T</span><span class="p">):</span>
        <span class="n">n</span><span class="p">,</span> <span class="n">m</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
        <span class="n">graph</span> <span class="o">=</span> <span class="p">[[]</span> <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">n</span><span class="p">)]</span>

        <span class="k">for</span> <span class="n">_</span> <span class="ow">in</span> <span class="nb">range</span><span class="p">(</span><span class="n">m</span><span class="p">):</span>
            <span class="n">u</span><span class="p">,</span> <span class="n">v</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>
            <span class="n">graph</span><span class="p">[</span><span class="n">u</span><span class="p">].</span><span class="n">append</span><span class="p">(</span><span class="n">v</span><span class="p">)</span>

        <span class="n">src</span><span class="p">,</span> <span class="n">dst</span> <span class="o">=</span> <span class="nb">map</span><span class="p">(</span><span class="nb">int</span><span class="p">,</span> <span class="nb">input</span><span class="p">().</span><span class="n">split</span><span class="p">())</span>

        <span class="k">if</span> <span class="n">is_possible_to_reach</span><span class="p">(</span><span class="n">graph</span><span class="p">,</span> <span class="n">src</span><span class="p">,</span> <span class="n">dst</span><span class="p">):</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"YES"</span><span class="p">)</span>
        <span class="k">else</span><span class="p">:</span>
            <span class="k">print</span><span class="p">(</span><span class="s">"NO"</span><span class="p">)</span>

<span class="k">if</span> <span class="n">__name__</span> <span class="o">==</span> <span class="s">"__main__"</span><span class="p">:</span>
    <span class="n">main</span><span class="p">()</span>
</code></pre></div></div>
<p><strong>This code should provide a faster solution using BFS, which is well-suited for finding paths in graphs. It will also handle the given time limit and rate limiting constraints more effectively.</strong></p>

<p>Finally got the flag at 8th try,</p>

<p><img src="/assets/img/post_img/sekai_wiki_flag.png" alt="flag_submission " /></p>

<blockquote>
  <p><strong><em><code class="language-plaintext highlighter-rouge">Flag : SEKAI{hyp3rL1nk_cha115_4r3_EZ}</code></em></strong></p>
</blockquote>

<hr />
:ET