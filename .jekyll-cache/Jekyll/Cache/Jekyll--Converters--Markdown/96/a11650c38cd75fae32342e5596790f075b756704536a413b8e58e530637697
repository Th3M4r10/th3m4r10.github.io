I"uK<p>Hi Mates!</p>

<p>I participated in the <a>picoCTF 2023</a> organized by <a style="color:cyan;" href="https://www.cmu.edu/">Carnegie Mellon University</a>, Which was run from Mar 14 2023 to Mar 28 2023. 
PicoCTF is a free online cybersecurity competition aimed at middle and high school students, but itâ€™s also suitable for beginners of all ages. It was a great learning experience and I really learnt a lot.</p>

<p>Let me explain the challenges that I have solved in picoCTF 2023.</p>

<h2 id="general-skills-"><a>General Skills :</a></h2>

<p>I solved all the challenges that were given !</p>

<h3 id="chrono">Chrono</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/chrono.png" alt="chrono" width="450" /></p>

<p>Firstly, We have to launch the instance and connect to the server with given credentials.</p>

<p>Based on the question prompt it had to be <code class="language-plaintext highlighter-rouge">cron jobs</code>.</p>

<p>After various attempts to access crontab itself, I tried looking inside <code class="language-plaintext highlighter-rouge">/etc/crontab</code> with the <code class="language-plaintext highlighter-rouge">cat</code> command.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{Sch3DUL7NG_T45K3_L1NUX_1b4d8744}</code></p>
</blockquote>

<hr />

<h3 id="money-ware">Money-ware</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/money-ware.png" alt="money-ware" /></p>

<p>I donâ€™t know what it is but iâ€™m googling <a>1Mz7153HMuxXTuR2R1t78mGSdzaAtNbBWX</a>, I got the link which had reports with descriptions and one of those descriptions points us to:</p>

<p>More information is here : <a href="https://blog.avira.com/petya-strikes-back/" target="_blank"> https://blog.avira.com/petya-strikes-back/ </a></p>

<p>This is an article about a vulnerability called <code class="language-plaintext highlighter-rouge">Petya</code> so our answer should be:</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{petya}</code></p>
</blockquote>

<hr />

<h3 id="permissions">Permissions</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/permissions.png" alt="permissions" /></p>

<p>We have to connect the server and <code class="language-plaintext highlighter-rouge">cd / </code>, I saw a directory named challenge, inside it there was a file which when cating it game the flag.</p>

<p><img src="/assets/img/post_img/permissions1.png" alt="solution" /></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{uS1ng_v1m_3dit0r_021d10ab}</code></p>
</blockquote>

<hr />

<h3 id="repetitions">Repetitions</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/repetitions.png" alt="repetitions" width="440" /></p>

<p>The file itself looks like standard base64 encoding and decoding it will give you the flag use <code class="language-plaintext highlighter-rouge">cyberchef</code>.
I had to decode with <code class="language-plaintext highlighter-rouge">base64</code> six times to get the flag ðŸ˜‚</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{base64_n3st3d_dic0d!n8_d0wnl04d3d_dfe803c6}</code></p>
</blockquote>

<hr />

<h3 id="useless">Useless</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/useless.png" alt="useless" /></p>

<p>In the home directory there is a file named useless.</p>

<p>After running the command <code class="language-plaintext highlighter-rouge">man useless</code></p>

<p>We got the flag,</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{us3l3ss_ch4ll3ng3_3xpl0it3d_3555}</code></p>
</blockquote>

<hr />

<h3 id="special">Special</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/specialer.png" alt="Special" /></p>

<p>This challenge was hard and to come with this bash script.</p>

<p>My solution was as follows:
<code class="language-plaintext highlighter-rouge">cat flag.txt | cat /home/ctf-player/*/*.txt</code></p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{5p311ch3ck_15_7h3_w0r57_a60bdf40}</code></p>
</blockquote>

<p>*** <br /></p>

<h3 id="specialer">Specialer</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/special.png" alt="Specialer" /></p>

<p>Connecting into the shell weâ€™re not allowed a lot of things like <code class="language-plaintext highlighter-rouge">cat, ls....</code></p>

<p>After a lot of tries,</p>

<p>My solution was as follows:
<code class="language-plaintext highlighter-rouge">echo "$( &lt; /home/ctf-player/ala/kazam.txt)"</code></p>

<p>Now we got the flag :</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{5p311ch3ck_15_7h3_w0r57_a60bdf40}</code></p>
</blockquote>

<hr />

<h2 id="cryptographhy-"><a>Cryptographhy :</a></h2>

<p>Although I couldnâ€™t solve all the challenges, I managed to solve some of the challenges that I knew how to do!</p>

<h3 id="hidetosee">HideToSee</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/hidetosee.png" alt="HideToSee" /></p>

<p>Lets download the file.</p>

<p>This is a jpeg file. Weâ€™ll be using a tool called <code class="language-plaintext highlighter-rouge">steghide</code> to extract information from this jpeg file, Use : <code class="language-plaintext highlighter-rouge">steghide -sf --extract atbash.jpg</code></p>

<p>Here we got a text file called <code class="language-plaintext highlighter-rouge">encrypted.txt</code>, Use : <code class="language-plaintext highlighter-rouge">cat encrypted.txt</code></p>

<p><code class="language-plaintext highlighter-rouge">krxlXGU{zgyzhs_xizxp_8z0uvwwx}</code></p>

<p>It looks like flag but itâ€™s not.</p>

<p>Now just need to decode atbash and youâ€™re done</p>

<p>We got the flag,</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{atbash_crack_6c4bcb08}</code></p>
</blockquote>

<hr />

<h3 id="readmycert">ReadMyCert</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/readmycert.png" alt="ReadMyCert" /></p>

<p>Lets download the file.</p>

<p>From the hint we were try to read the file. Bang !!
<img src="/assets/img/post_img/readmycert1.png" alt="ReadMyCert" /></p>

<p>And the flag is,</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{read_mycert_41d1c74c}</code></p>
</blockquote>

<hr />

<h3 id="rotation">Rotation</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/rotation.png" alt="rotation" /></p>

<p>Lets download the file and open with <code class="language-plaintext highlighter-rouge">cat encrypted.txt</code></p>

<p><code class="language-plaintext highlighter-rouge">xqkwKBN{z0bib1wv_l3kzgxb3l_555957n3}</code></p>

<p>We got another encrypted text having the flag format. I got to know that this is a <code class="language-plaintext highlighter-rouge">caesar cipher</code>, so I used to decrypt with this <a href="https://www.boxentriq.com/code-breaking/caesar-cipher" target="_blank">online tool</a></p>

<p>It is a simple Rotation cipher, brute-forcing works fine.</p>

<p>Here is the flag,</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{r0tat1on_d3crypt3d_949af1a1}</code></p>
</blockquote>

<hr />

<h2 id="forensics-"><a>Forensics :</a></h2>

<h3 id="hideme">Hideme</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/hideme.png" alt="rotation" /></p>

<p>Lets download the file and check file type with <code class="language-plaintext highlighter-rouge">exiftool</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ file flag.png        
flag.png: PNG image data, 512 x 504, 8-bit/color RGBA, non-interlaced
                                                                                                                                                                        
â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ exiftool flag.png        
ExifTool Version Number         : 12.57
File Name                       : flag.png
Directory                       : .
File Size                       : 43 kB
File Modification Date/Time     : 2023:03:22 19:38:37+01:00
File Access Date/Time           : 2023:03:22 19:38:53+01:00
File Inode Change Date/Time     : 2023:03:22 19:38:48+01:00
File Permissions                : -rw-r--r--
File Type                       : PNG
File Type Extension             : png
MIME Type                       : image/png
Image Width                     : 512
Image Height                    : 504
Bit Depth                       : 8
Color Type                      : RGB with Alpha
Compression                     : Deflate/Inflate
Filter                          : Adaptive
Interlace                       : Noninterlaced
Warning                         : [minor] Trailer data after PNG IEND chunk
Image Size                      : 512x504
Megapixels                      : 0.258

</code></pre></div></div>
<p>This is a PNG, So we can observe the header using a tool called <code class="language-plaintext highlighter-rouge">zsteg</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”Œâ”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€â”€â•¼ $zsteg flag.png 
[?] 3191 bytes of extra data after image end (IEND), offset = 0x9b3b
extradata:0         .. file: Zip archive data, at least v1.0 to extract
    00000000: 50 4b 03 04 0a 00 00 00  00 00 3a 10 70 56 00 00  |PK........:.pV..|
    00000010: 00 00 00 00 00 00 00 00  00 00 07 00 1c 00 73 65  |..............se|
    00000020: 63 72 65 74 2f 55 54 09  00 03 8f 78 12 64 8f 78  |cret/UT....x.d.x|
    00000030: 12 64 75 78 0b 00 01 04  00 00 00 00 04 00 00 00  |.dux............|
    00000040: 00 50 4b 03 04 14 00 00  00 08 00 3a 10 70 56 67  |.PK........:.pVg|
    00000050: 45 23 b5 35 0b 00 00 d0  0b 00 00 0f 00 1c 00 73  |E#.5...........s|
    00000060: 65 63 72 65 74 2f 66 6c  61 67 2e 70 6e 67 55 54  |ecret/flag.pngUT|
    00000070: 09 00 03 8f 78 12 64 8f  78 12 64 75 78 0b 00 01  |....x.d.x.dux...|
    00000080: 04 00 00 00 00 04 00 00  00 00 cd 56 59 3c 14 fc  |...........VY&lt;..|
    00000090: 1a fe 87 b2 26 1f 22 5b  a3 65 1a 59 c6 30 76 33  |....&amp;."[.e.Y.0v3|
    000000a0: c4 47 92 35 44 f6 35 bb  6c 43 1a 65 64 49 85 10  |.G.5D.5.lC.edI..|
    000000b0: 45 d9 3e 6a ec 63 9d 21  64 df 69 08 23 fb 12 45  |E.&gt;j.c.!d.i.#..E|
    000000c0: f6 65 2c 8d 8a 33 e7 77  ae ce c5 b9 3f ef c5 fb  |.e,..3.w....?...|
    000000d0: bc db 73 f7 fe 9e df f3  cc d8 50 e7 34 9b 20 1b  |..s.......P.4. .|
    000000e0: 00 e0 b4 ee 0d 2d 13 00  18 ee d0 6b 59 2e 7a 02  |.....-.....kY.z.|
    000000f0: 7b 3e 57 cc e9 c0 e4 a6  61 a0 01 40 45 02 fb 6f  |{&gt;W.....a..@E..o|

</code></pre></div></div>
<p>Interesting ðŸ˜Ž. So, I went ahead to unzip command : <code class="language-plaintext highlighter-rouge">unzip flag.png</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ unzip flag.png                          
Archive:  flag.png
warning [flag.png]:  39739 extra bytes at beginning or within zipfile
  (attempting to process anyway)
   creating: secret/
  inflating: secret/flag.png         
                                                                                                                                                                        
â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ ls
flag.png  secret
                                                                                                                                                                        
â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ cd secret   
                                                                                                                                                                        
â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files/secret]
â””â”€$ ls
flag.png

</code></pre></div></div>
<p>Now, Just you have to open <code class="language-plaintext highlighter-rouge">flag.png</code>.</p>

<p>Yeah, we got the flag :</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{Hiddinng_An_imag3_within_@n_ima9e_82101824}</code></p>
</blockquote>

<hr />

<h3 id="pcappoisoning">PcapPoisoning</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/pcappoisoning.png" alt="rotation" /></p>

<p>Lets download the file</p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ ls
flag.png  secret  trace.pcap
                                                                                                                                                                        
â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ file trace.pcap 
trace.pcap: pcap capture file, microsecond ts (little-endian) - version 2.4 (Raw IPv4, capture length 65535)
</code></pre></div></div>
<p>This is a pcap file. So, We have to check through <code class="language-plaintext highlighter-rouge">wireshark</code>. But if possible we can find the flag using command <code class="language-plaintext highlighter-rouge">grep</code>.</p>

<p>just checking with command : <code class="language-plaintext highlighter-rouge">strings trace.pcap | grep -i "pico"</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ strings trace.pcap | grep -i "pico"
picoCTF{P64P_4N4L7S1S_SU55355FUL_31010c46}
</code></pre></div></div>
<p>YayyyðŸ˜‰!, We got the flag :</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{P64P_4N4L7S1S_SU55355FUL_31010c46}</code></p>
</blockquote>

<hr />

<h2 id="reverse-engineering-"><a>Reverse Engineering :</a></h2>

<h3 id="reverse">Reverse</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/reverse.png" alt="rotation" /></p>

<p>Lets download the file and check file type with <code class="language-plaintext highlighter-rouge">exiftool</code></p>
<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ file ret
ret: ELF 64-bit LSB pie executable, x86-64, version 1 (SYSV), dynamically linked, interpreter /lib64/ld-linux-x86-64.so.2, BuildID[sha1]=7f12d7198b75bd4d9f159e7a45141d4f13836e51, for GNU/Linux 3.2.0, not stripped
                                                                                                                                                                                                
â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ exiftool ret           
ExifTool Version Number         : 12.57
File Name                       : ret
Directory                       : .
File Size                       : 17 kB
File Modification Date/Time     : 2023:03:30 12:41:59+01:00
File Access Date/Time           : 2023:03:30 12:42:27+01:00
File Inode Change Date/Time     : 2023:03:30 12:42:01+01:00
File Permissions                : -rw-r--r--
File Type                       : ELF shared library
File Type Extension             : so
MIME Type                       : application/octet-stream
CPU Architecture                : 64 bit
CPU Byte Order                  : Little endian
Object File Type                : Shared object file
CPU Type                        : AMD x86-64
</code></pre></div></div>

<p>Cool, It is an executable file, Once again we can check with the command <code class="language-plaintext highlighter-rouge">strings ret | grep -i "pico"</code></p>

<p>We got the flag,</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag :  picoCTF{3lf_r3v3r5ing_succe55ful_fa9cb3b1}</code></p>
</blockquote>

<hr />

<h3 id="safe-opener-2">Safe Opener 2</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/safeopener2.png" alt="rotation" /></p>

<p>Lets download the file and check file type with <code class="language-plaintext highlighter-rouge">exiftool</code></p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ file SafeOpener.class 
SafeOpener.class: compiled Java class data, version 52.0 (Java 1.8)
                                                                                                                                                                                                
â”Œâ”€â”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€$ exiftool SafeOpener.class 
ExifTool Version Number         : 12.57
File Name                       : SafeOpener.class
Directory                       : .
File Size                       : 2.0 kB
File Modification Date/Time     : 2023:03:30 12:46:01+01:00
File Access Date/Time           : 2023:03:30 12:46:24+01:00
File Inode Change Date/Time     : 2023:03:30 12:46:16+01:00
File Permissions                : -rw-r--r--
File Type                       : Java bytecode
File Type Extension             : class
MIME Type                       : application/java-byte-code
</code></pre></div></div>
<p>Just like before challenge, Weâ€™ll be checking with the strings command :
<code class="language-plaintext highlighter-rouge">strings SafeOpener.class | grep -i "pico"</code></p>

<p>Coooooool, we got the flag.</p>

<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{SAf3_0p3n3rr_y0u_solv3d_it_198203f7}</code></p>
</blockquote>

<hr />

<h2 id="binary-exploitation-"><a>Binary Exploitation :</a></h2>

<h3 id="two-sum">Two-Sum</h3>

<p>Here is the given challenge :</p>

<p><img src="/assets/img/post_img/two-sum.png" alt="rotation" /></p>

<p>Trying it locally works and the reason is beacause the maximum value of a signed integer is <code class="language-plaintext highlighter-rouge">2147483647</code> so giving it <code class="language-plaintext highlighter-rouge">1</code> goes above the maximum value.</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>â”Œâ”€[m4r10@parrot]â”€[/media/sf_CyberSec/task_files]
â””â”€â”€â•¼ $nc saturn.picoctf.net 52197.
n1 &gt; n1 + n2 OR n2 &gt; n1 + n2 
What two positive numbers can make this possible: 
2147483647
1
You entered 2147483647 and 1
You have an integer overflow
YOUR FLAG IS: picoCTF{Tw0_Sum_Integer_Bu773R_0v3rfl0w_fe14e9e9}
</code></pre></div></div>

<p>Yahooo !, We got the flagðŸ˜Ž</p>
<blockquote>
  <p><code class="language-plaintext highlighter-rouge">Flag : picoCTF{Tw0_Sum_Integer_Bu773R_0v3rfl0w_bc0adfd1}</code></p>
</blockquote>

<hr />

:ET